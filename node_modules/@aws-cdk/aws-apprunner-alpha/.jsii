{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "aws-cdk-lib": "^2.125.0",
    "constructs": "^10.0.0"
  },
  "dependencyClosure": {
    "@aws-cdk/asset-awscli-v1": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.AwsCliV1",
          "packageId": "Amazon.CDK.Asset.AwsCliV1"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-awscli-go",
          "packageName": "awscliv1"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-awscli-v1",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.awscli.v1"
        },
        "js": {
          "npm": "@aws-cdk/asset-awscli-v1"
        },
        "python": {
          "distName": "aws-cdk.asset-awscli-v1",
          "module": "aws_cdk.asset_awscli_v1"
        }
      }
    },
    "@aws-cdk/asset-kubectl-v20": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.KubectlV20",
          "packageId": "Amazon.CDK.Asset.KubectlV20"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-kubectl-go",
          "packageName": "kubectlv20"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-kubectl-v20",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.kubectl.v20"
        },
        "js": {
          "npm": "@aws-cdk/asset-kubectl-v20"
        },
        "python": {
          "distName": "aws-cdk.asset-kubectl-v20",
          "module": "aws_cdk.asset_kubectl_v20"
        }
      }
    },
    "@aws-cdk/asset-node-proxy-agent-v6": {
      "targets": {
        "dotnet": {
          "namespace": "Amazon.CDK.Asset.NodeProxyAgentV6",
          "packageId": "Amazon.CDK.Asset.NodeProxyAgentV6"
        },
        "go": {
          "moduleName": "github.com/cdklabs/awscdk-asset-node-proxy-agent-go",
          "packageName": "nodeproxyagentv6"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-asset-node-proxy-agent-v6",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cdk.asset.node.proxy.agent.v6"
        },
        "js": {
          "npm": "@aws-cdk/asset-node-proxy-agent-v6"
        },
        "python": {
          "distName": "aws-cdk.asset-node-proxy-agent-v6",
          "module": "aws_cdk.asset_node_proxy_agent_v6"
        }
      }
    },
    "aws-cdk-lib": {
      "submodules": {
        "aws-cdk-lib.alexa_ask": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Alexa.Ask"
            },
            "java": {
              "package": "software.amazon.awscdk.alexa.ask"
            },
            "python": {
              "module": "aws_cdk.alexa_ask"
            }
          }
        },
        "aws-cdk-lib.assertions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assertions"
            },
            "java": {
              "package": "software.amazon.awscdk.assertions"
            },
            "python": {
              "module": "aws_cdk.assertions"
            }
          }
        },
        "aws-cdk-lib.assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.assets"
            },
            "python": {
              "module": "aws_cdk.assets"
            }
          }
        },
        "aws-cdk-lib.aws_accessanalyzer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AccessAnalyzer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.accessanalyzer"
            },
            "python": {
              "module": "aws_cdk.aws_accessanalyzer"
            }
          }
        },
        "aws-cdk-lib.aws_acmpca": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ACMPCA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.acmpca"
            },
            "python": {
              "module": "aws_cdk.aws_acmpca"
            }
          }
        },
        "aws-cdk-lib.aws_amazonmq": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmazonMQ"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amazonmq"
            },
            "python": {
              "module": "aws_cdk.aws_amazonmq"
            }
          }
        },
        "aws-cdk-lib.aws_amplify": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Amplify"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplify"
            },
            "python": {
              "module": "aws_cdk.aws_amplify"
            }
          }
        },
        "aws-cdk-lib.aws_amplifyuibuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AmplifyUIBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.amplifyuibuilder"
            },
            "python": {
              "module": "aws_cdk.aws_amplifyuibuilder"
            }
          }
        },
        "aws-cdk-lib.aws_apigateway": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APIGateway"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigateway"
            },
            "python": {
              "module": "aws_cdk.aws_apigateway"
            }
          }
        },
        "aws-cdk-lib.aws_apigatewayv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Apigatewayv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apigatewayv2"
            },
            "python": {
              "module": "aws_cdk.aws_apigatewayv2"
            }
          }
        },
        "aws-cdk-lib.aws_apigatewayv2_authorizers": {},
        "aws-cdk-lib.aws_apigatewayv2_integrations": {},
        "aws-cdk-lib.aws_appconfig": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppConfig"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appconfig"
            },
            "python": {
              "module": "aws_cdk.aws_appconfig"
            }
          }
        },
        "aws-cdk-lib.aws_appflow": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppFlow"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appflow"
            },
            "python": {
              "module": "aws_cdk.aws_appflow"
            }
          }
        },
        "aws-cdk-lib.aws_appintegrations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppIntegrations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appintegrations"
            },
            "python": {
              "module": "aws_cdk.aws_appintegrations"
            }
          }
        },
        "aws-cdk-lib.aws_applicationautoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationautoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_applicationautoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_applicationinsights": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ApplicationInsights"
            },
            "java": {
              "package": "software.amazon.awscdk.services.applicationinsights"
            },
            "python": {
              "module": "aws_cdk.aws_applicationinsights"
            }
          }
        },
        "aws-cdk-lib.aws_appmesh": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppMesh"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appmesh"
            },
            "python": {
              "module": "aws_cdk.aws_appmesh"
            }
          }
        },
        "aws-cdk-lib.aws_apprunner": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppRunner"
            },
            "java": {
              "package": "software.amazon.awscdk.services.apprunner"
            },
            "python": {
              "module": "aws_cdk.aws_apprunner"
            }
          }
        },
        "aws-cdk-lib.aws_appstream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppStream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appstream"
            },
            "python": {
              "module": "aws_cdk.aws_appstream"
            }
          }
        },
        "aws-cdk-lib.aws_appsync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AppSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.appsync"
            },
            "python": {
              "module": "aws_cdk.aws_appsync"
            }
          }
        },
        "aws-cdk-lib.aws_aps": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.APS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.aps"
            },
            "python": {
              "module": "aws_cdk.aws_aps"
            }
          }
        },
        "aws-cdk-lib.aws_arczonalshift": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.ARCZonalShift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.arczonalshift"
            },
            "python": {
              "module": "aws_cdk.aws_arczonalshift"
            }
          }
        },
        "aws-cdk-lib.aws_athena": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Athena"
            },
            "java": {
              "package": "software.amazon.awscdk.services.athena"
            },
            "python": {
              "module": "aws_cdk.aws_athena"
            }
          }
        },
        "aws-cdk-lib.aws_auditmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AuditManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.auditmanager"
            },
            "python": {
              "module": "aws_cdk.aws_auditmanager"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_common": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.Common"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.common"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_common"
            }
          }
        },
        "aws-cdk-lib.aws_autoscaling_hooktargets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScaling.HookTargets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscaling.hooktargets"
            },
            "python": {
              "module": "aws_cdk.aws_autoscaling_hooktargets"
            }
          }
        },
        "aws-cdk-lib.aws_autoscalingplans": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.AutoScalingPlans"
            },
            "java": {
              "package": "software.amazon.awscdk.services.autoscalingplans"
            },
            "python": {
              "module": "aws_cdk.aws_autoscalingplans"
            }
          }
        },
        "aws-cdk-lib.aws_b2bi": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.B2BI"
            },
            "java": {
              "package": "software.amazon.awscdk.services.b2bi"
            },
            "python": {
              "module": "aws_cdk.aws_b2bi"
            }
          }
        },
        "aws-cdk-lib.aws_backup": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Backup"
            },
            "java": {
              "package": "software.amazon.awscdk.services.backup"
            },
            "python": {
              "module": "aws_cdk.aws_backup"
            }
          }
        },
        "aws-cdk-lib.aws_backupgateway": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.BackupGateway"
            },
            "java": {
              "package": "software.amazon.awscdk.services.backupgateway"
            },
            "python": {
              "module": "aws_cdk.aws_backupgateway"
            }
          }
        },
        "aws-cdk-lib.aws_batch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Batch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.batch"
            },
            "python": {
              "module": "aws_cdk.aws_batch"
            }
          }
        },
        "aws-cdk-lib.aws_bedrock": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Bedrock"
            },
            "java": {
              "package": "software.amazon.awscdk.services.bedrock"
            },
            "python": {
              "module": "aws_cdk.aws_bedrock"
            }
          }
        },
        "aws-cdk-lib.aws_billingconductor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.BillingConductor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.billingconductor"
            },
            "python": {
              "module": "aws_cdk.aws_billingconductor"
            }
          }
        },
        "aws-cdk-lib.aws_budgets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Budgets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.budgets"
            },
            "python": {
              "module": "aws_cdk.aws_budgets"
            }
          }
        },
        "aws-cdk-lib.aws_cassandra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cassandra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cassandra"
            },
            "python": {
              "module": "aws_cdk.aws_cassandra"
            }
          }
        },
        "aws-cdk-lib.aws_ce": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CE"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ce"
            },
            "python": {
              "module": "aws_cdk.aws_ce"
            }
          }
        },
        "aws-cdk-lib.aws_certificatemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CertificateManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.certificatemanager"
            },
            "python": {
              "module": "aws_cdk.aws_certificatemanager"
            }
          }
        },
        "aws-cdk-lib.aws_chatbot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Chatbot"
            },
            "java": {
              "package": "software.amazon.awscdk.services.chatbot"
            },
            "python": {
              "module": "aws_cdk.aws_chatbot"
            }
          }
        },
        "aws-cdk-lib.aws_cleanrooms": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.CleanRooms"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cleanrooms"
            },
            "python": {
              "module": "aws_cdk.aws_cleanrooms"
            }
          }
        },
        "aws-cdk-lib.aws_cloud9": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cloud9"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloud9"
            },
            "python": {
              "module": "aws_cdk.aws_cloud9"
            }
          }
        },
        "aws-cdk-lib.aws_cloudformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudformation"
            },
            "python": {
              "module": "aws_cdk.aws_cloudformation"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront"
            }
          }
        },
        "aws-cdk-lib.aws_cloudfront.experimental": {},
        "aws-cdk-lib.aws_cloudfront_origins": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudFront.Origins"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudfront.origins"
            },
            "python": {
              "module": "aws_cdk.aws_cloudfront_origins"
            }
          }
        },
        "aws-cdk-lib.aws_cloudtrail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudTrail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudtrail"
            },
            "python": {
              "module": "aws_cdk.aws_cloudtrail"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch"
            }
          }
        },
        "aws-cdk-lib.aws_cloudwatch_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CloudWatch.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cloudwatch.actions"
            },
            "python": {
              "module": "aws_cdk.aws_cloudwatch_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codeartifact": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeArtifact"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeartifact"
            },
            "python": {
              "module": "aws_cdk.aws_codeartifact"
            }
          }
        },
        "aws-cdk-lib.aws_codebuild": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeBuild"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codebuild"
            },
            "python": {
              "module": "aws_cdk.aws_codebuild"
            }
          }
        },
        "aws-cdk-lib.aws_codecommit": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeCommit"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codecommit"
            },
            "python": {
              "module": "aws_cdk.aws_codecommit"
            }
          }
        },
        "aws-cdk-lib.aws_codedeploy": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeDeploy"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codedeploy"
            },
            "python": {
              "module": "aws_cdk.aws_codedeploy"
            }
          }
        },
        "aws-cdk-lib.aws_codeguruprofiler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruProfiler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codeguruprofiler"
            },
            "python": {
              "module": "aws_cdk.aws_codeguruprofiler"
            }
          }
        },
        "aws-cdk-lib.aws_codegurureviewer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeGuruReviewer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codegurureviewer"
            },
            "python": {
              "module": "aws_cdk.aws_codegurureviewer"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline"
            }
          }
        },
        "aws-cdk-lib.aws_codepipeline_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodePipeline.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codepipeline.actions"
            },
            "python": {
              "module": "aws_cdk.aws_codepipeline_actions"
            }
          }
        },
        "aws-cdk-lib.aws_codestar": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Codestar"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestar"
            },
            "python": {
              "module": "aws_cdk.aws_codestar"
            }
          }
        },
        "aws-cdk-lib.aws_codestarconnections": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarConnections"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarconnections"
            },
            "python": {
              "module": "aws_cdk.aws_codestarconnections"
            }
          }
        },
        "aws-cdk-lib.aws_codestarnotifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CodeStarNotifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.codestarnotifications"
            },
            "python": {
              "module": "aws_cdk.aws_codestarnotifications"
            }
          }
        },
        "aws-cdk-lib.aws_cognito": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Cognito"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cognito"
            },
            "python": {
              "module": "aws_cdk.aws_cognito"
            }
          }
        },
        "aws-cdk-lib.aws_comprehend": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Comprehend"
            },
            "java": {
              "package": "software.amazon.awscdk.services.comprehend"
            },
            "python": {
              "module": "aws_cdk.aws_comprehend"
            }
          }
        },
        "aws-cdk-lib.aws_config": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Config"
            },
            "java": {
              "package": "software.amazon.awscdk.services.config"
            },
            "python": {
              "module": "aws_cdk.aws_config"
            }
          }
        },
        "aws-cdk-lib.aws_connect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Connect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connect"
            },
            "python": {
              "module": "aws_cdk.aws_connect"
            }
          }
        },
        "aws-cdk-lib.aws_connectcampaigns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ConnectCampaigns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.connectcampaigns"
            },
            "python": {
              "module": "aws_cdk.aws_connectcampaigns"
            }
          }
        },
        "aws-cdk-lib.aws_controltower": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ControlTower"
            },
            "java": {
              "package": "software.amazon.awscdk.services.controltower"
            },
            "python": {
              "module": "aws_cdk.aws_controltower"
            }
          }
        },
        "aws-cdk-lib.aws_cur": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CUR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.cur"
            },
            "python": {
              "module": "aws_cdk.aws_cur"
            }
          }
        },
        "aws-cdk-lib.aws_customerprofiles": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.CustomerProfiles"
            },
            "java": {
              "package": "software.amazon.awscdk.services.customerprofiles"
            },
            "python": {
              "module": "aws_cdk.aws_customerprofiles"
            }
          }
        },
        "aws-cdk-lib.aws_databrew": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataBrew"
            },
            "java": {
              "package": "software.amazon.awscdk.services.databrew"
            },
            "python": {
              "module": "aws_cdk.aws_databrew"
            }
          }
        },
        "aws-cdk-lib.aws_datapipeline": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataPipeline"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datapipeline"
            },
            "python": {
              "module": "aws_cdk.aws_datapipeline"
            }
          }
        },
        "aws-cdk-lib.aws_datasync": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DataSync"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datasync"
            },
            "python": {
              "module": "aws_cdk.aws_datasync"
            }
          }
        },
        "aws-cdk-lib.aws_datazone": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.DataZone"
            },
            "java": {
              "package": "software.amazon.awscdk.services.datazone"
            },
            "python": {
              "module": "aws_cdk.aws_datazone"
            }
          }
        },
        "aws-cdk-lib.aws_dax": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DAX"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dax"
            },
            "python": {
              "module": "aws_cdk.aws_dax"
            }
          }
        },
        "aws-cdk-lib.aws_detective": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Detective"
            },
            "java": {
              "package": "software.amazon.awscdk.services.detective"
            },
            "python": {
              "module": "aws_cdk.aws_detective"
            }
          }
        },
        "aws-cdk-lib.aws_devicefarm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DeviceFarm"
            },
            "java": {
              "package": "software.amazon.awscdk.services.devicefarm"
            },
            "python": {
              "module": "aws_cdk.aws_devicefarm"
            }
          }
        },
        "aws-cdk-lib.aws_devopsguru": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DevOpsGuru"
            },
            "java": {
              "package": "software.amazon.awscdk.services.devopsguru"
            },
            "python": {
              "module": "aws_cdk.aws_devopsguru"
            }
          }
        },
        "aws-cdk-lib.aws_directoryservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DirectoryService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.directoryservice"
            },
            "python": {
              "module": "aws_cdk.aws_directoryservice"
            }
          }
        },
        "aws-cdk-lib.aws_dlm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DLM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dlm"
            },
            "python": {
              "module": "aws_cdk.aws_dlm"
            }
          }
        },
        "aws-cdk-lib.aws_dms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dms"
            },
            "python": {
              "module": "aws_cdk.aws_dms"
            }
          }
        },
        "aws-cdk-lib.aws_docdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdb"
            },
            "python": {
              "module": "aws_cdk.aws_docdb"
            }
          }
        },
        "aws-cdk-lib.aws_docdbelastic": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DocDBElastic"
            },
            "java": {
              "package": "software.amazon.awscdk.services.docdbelastic"
            },
            "python": {
              "module": "aws_cdk.aws_docdbelastic"
            }
          }
        },
        "aws-cdk-lib.aws_dynamodb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.DynamoDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.dynamodb"
            },
            "python": {
              "module": "aws_cdk.aws_dynamodb"
            }
          }
        },
        "aws-cdk-lib.aws_ec2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EC2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ec2"
            },
            "python": {
              "module": "aws_cdk.aws_ec2"
            }
          }
        },
        "aws-cdk-lib.aws_ecr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr"
            },
            "python": {
              "module": "aws_cdk.aws_ecr"
            }
          }
        },
        "aws-cdk-lib.aws_ecr_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ecr.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecr.assets"
            },
            "python": {
              "module": "aws_cdk.aws_ecr_assets"
            }
          }
        },
        "aws-cdk-lib.aws_ecs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs"
            },
            "python": {
              "module": "aws_cdk.aws_ecs"
            }
          }
        },
        "aws-cdk-lib.aws_ecs_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ECS.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ecs.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_ecs_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_efs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EFS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.efs"
            },
            "python": {
              "module": "aws_cdk.aws_efs"
            }
          }
        },
        "aws-cdk-lib.aws_eks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EKS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eks"
            },
            "python": {
              "module": "aws_cdk.aws_eks"
            }
          }
        },
        "aws-cdk-lib.aws_elasticache": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElastiCache"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticache"
            },
            "python": {
              "module": "aws_cdk.aws_elasticache"
            }
          }
        },
        "aws-cdk-lib.aws_elasticbeanstalk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticBeanstalk"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticbeanstalk"
            },
            "python": {
              "module": "aws_cdk.aws_elasticbeanstalk"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancing": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancing"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancing"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancing"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.actions"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_actions"
            }
          }
        },
        "aws-cdk-lib.aws_elasticloadbalancingv2_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ElasticLoadBalancingV2.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticloadbalancingv2.targets"
            },
            "python": {
              "module": "aws_cdk.aws_elasticloadbalancingv2_targets"
            }
          }
        },
        "aws-cdk-lib.aws_elasticsearch": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Elasticsearch"
            },
            "java": {
              "package": "software.amazon.awscdk.services.elasticsearch"
            },
            "python": {
              "module": "aws_cdk.aws_elasticsearch"
            }
          }
        },
        "aws-cdk-lib.aws_emr": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMR"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emr"
            },
            "python": {
              "module": "aws_cdk.aws_emr"
            }
          }
        },
        "aws-cdk-lib.aws_emrcontainers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRContainers"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrcontainers"
            },
            "python": {
              "module": "aws_cdk.aws_emrcontainers"
            }
          }
        },
        "aws-cdk-lib.aws_emrserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EMRServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.emrserverless"
            },
            "python": {
              "module": "aws_cdk.aws_emrserverless"
            }
          }
        },
        "aws-cdk-lib.aws_entityresolution": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.EntityResolution"
            },
            "java": {
              "package": "software.amazon.awscdk.services.entityresolution"
            },
            "python": {
              "module": "aws_cdk.aws_entityresolution"
            }
          }
        },
        "aws-cdk-lib.aws_events": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events"
            },
            "python": {
              "module": "aws_cdk.aws_events"
            }
          }
        },
        "aws-cdk-lib.aws_events_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Events.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.events.targets"
            },
            "python": {
              "module": "aws_cdk.aws_events_targets"
            }
          }
        },
        "aws-cdk-lib.aws_eventschemas": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.EventSchemas"
            },
            "java": {
              "package": "software.amazon.awscdk.services.eventschemas"
            },
            "python": {
              "module": "aws_cdk.aws_eventschemas"
            }
          }
        },
        "aws-cdk-lib.aws_evidently": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Evidently"
            },
            "java": {
              "package": "software.amazon.awscdk.services.evidently"
            },
            "python": {
              "module": "aws_cdk.aws_evidently"
            }
          }
        },
        "aws-cdk-lib.aws_finspace": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FinSpace"
            },
            "java": {
              "package": "software.amazon.awscdk.services.finspace"
            },
            "python": {
              "module": "aws_cdk.aws_finspace"
            }
          }
        },
        "aws-cdk-lib.aws_fis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FIS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fis"
            },
            "python": {
              "module": "aws_cdk.aws_fis"
            }
          }
        },
        "aws-cdk-lib.aws_fms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fms"
            },
            "python": {
              "module": "aws_cdk.aws_fms"
            }
          }
        },
        "aws-cdk-lib.aws_forecast": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Forecast"
            },
            "java": {
              "package": "software.amazon.awscdk.services.forecast"
            },
            "python": {
              "module": "aws_cdk.aws_forecast"
            }
          }
        },
        "aws-cdk-lib.aws_frauddetector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FraudDetector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.frauddetector"
            },
            "python": {
              "module": "aws_cdk.aws_frauddetector"
            }
          }
        },
        "aws-cdk-lib.aws_fsx": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.FSx"
            },
            "java": {
              "package": "software.amazon.awscdk.services.fsx"
            },
            "python": {
              "module": "aws_cdk.aws_fsx"
            }
          }
        },
        "aws-cdk-lib.aws_gamelift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GameLift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.gamelift"
            },
            "python": {
              "module": "aws_cdk.aws_gamelift"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator"
            }
          }
        },
        "aws-cdk-lib.aws_globalaccelerator_endpoints": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GlobalAccelerator.Endpoints"
            },
            "java": {
              "package": "software.amazon.awscdk.services.globalaccelerator.endpoints"
            },
            "python": {
              "module": "aws_cdk.aws_globalaccelerator_endpoints"
            }
          }
        },
        "aws-cdk-lib.aws_glue": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Glue"
            },
            "java": {
              "package": "software.amazon.awscdk.services.glue"
            },
            "python": {
              "module": "aws_cdk.aws_glue"
            }
          }
        },
        "aws-cdk-lib.aws_grafana": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Grafana"
            },
            "java": {
              "package": "software.amazon.awscdk.services.grafana"
            },
            "python": {
              "module": "aws_cdk.aws_grafana"
            }
          }
        },
        "aws-cdk-lib.aws_greengrass": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Greengrass"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrass"
            },
            "python": {
              "module": "aws_cdk.aws_greengrass"
            }
          }
        },
        "aws-cdk-lib.aws_greengrassv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GreengrassV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.greengrassv2"
            },
            "python": {
              "module": "aws_cdk.aws_greengrassv2"
            }
          }
        },
        "aws-cdk-lib.aws_groundstation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GroundStation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.groundstation"
            },
            "python": {
              "module": "aws_cdk.aws_groundstation"
            }
          }
        },
        "aws-cdk-lib.aws_guardduty": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.GuardDuty"
            },
            "java": {
              "package": "software.amazon.awscdk.services.guardduty"
            },
            "python": {
              "module": "aws_cdk.aws_guardduty"
            }
          }
        },
        "aws-cdk-lib.aws_healthimaging": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.HealthImaging"
            },
            "java": {
              "package": "software.amazon.awscdk.services.healthimaging"
            },
            "python": {
              "module": "aws_cdk.aws_healthimaging"
            }
          }
        },
        "aws-cdk-lib.aws_healthlake": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.HealthLake"
            },
            "java": {
              "package": "software.amazon.awscdk.services.healthlake"
            },
            "python": {
              "module": "aws_cdk.aws_healthlake"
            }
          }
        },
        "aws-cdk-lib.aws_iam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iam"
            },
            "python": {
              "module": "aws_cdk.aws_iam"
            }
          }
        },
        "aws-cdk-lib.aws_identitystore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IdentityStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.identitystore"
            },
            "python": {
              "module": "aws_cdk.aws_identitystore"
            }
          }
        },
        "aws-cdk-lib.aws_imagebuilder": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ImageBuilder"
            },
            "java": {
              "package": "software.amazon.awscdk.services.imagebuilder"
            },
            "python": {
              "module": "aws_cdk.aws_imagebuilder"
            }
          }
        },
        "aws-cdk-lib.aws_inspector": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Inspector"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspector"
            },
            "python": {
              "module": "aws_cdk.aws_inspector"
            }
          }
        },
        "aws-cdk-lib.aws_inspectorv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.InspectorV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.inspectorv2"
            },
            "python": {
              "module": "aws_cdk.aws_inspectorv2"
            }
          }
        },
        "aws-cdk-lib.aws_internetmonitor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.InternetMonitor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.internetmonitor"
            },
            "python": {
              "module": "aws_cdk.aws_internetmonitor"
            }
          }
        },
        "aws-cdk-lib.aws_iot": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoT"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iot"
            },
            "python": {
              "module": "aws_cdk.aws_iot"
            }
          }
        },
        "aws-cdk-lib.aws_iot1click": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoT1Click"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iot1click"
            },
            "python": {
              "module": "aws_cdk.aws_iot1click"
            }
          }
        },
        "aws-cdk-lib.aws_iotanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_iotanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_iotcoredeviceadvisor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTCoreDeviceAdvisor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotcoredeviceadvisor"
            },
            "python": {
              "module": "aws_cdk.aws_iotcoredeviceadvisor"
            }
          }
        },
        "aws-cdk-lib.aws_iotevents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTEvents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotevents"
            },
            "python": {
              "module": "aws_cdk.aws_iotevents"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleethub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleethub"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleethub"
            }
          }
        },
        "aws-cdk-lib.aws_iotfleetwise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTFleetWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotfleetwise"
            },
            "python": {
              "module": "aws_cdk.aws_iotfleetwise"
            }
          }
        },
        "aws-cdk-lib.aws_iotsitewise": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTSiteWise"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotsitewise"
            },
            "python": {
              "module": "aws_cdk.aws_iotsitewise"
            }
          }
        },
        "aws-cdk-lib.aws_iotthingsgraph": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTThingsGraph"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotthingsgraph"
            },
            "python": {
              "module": "aws_cdk.aws_iotthingsgraph"
            }
          }
        },
        "aws-cdk-lib.aws_iottwinmaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTTwinMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iottwinmaker"
            },
            "python": {
              "module": "aws_cdk.aws_iottwinmaker"
            }
          }
        },
        "aws-cdk-lib.aws_iotwireless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IoTWireless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.iotwireless"
            },
            "python": {
              "module": "aws_cdk.aws_iotwireless"
            }
          }
        },
        "aws-cdk-lib.aws_ivs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Ivs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ivs"
            },
            "python": {
              "module": "aws_cdk.aws_ivs"
            }
          }
        },
        "aws-cdk-lib.aws_ivschat": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.IVSChat"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ivschat"
            },
            "python": {
              "module": "aws_cdk.aws_ivschat"
            }
          }
        },
        "aws-cdk-lib.aws_kafkaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KafkaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kafkaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_kafkaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_kendra": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kendra"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kendra"
            },
            "python": {
              "module": "aws_cdk.aws_kendra"
            }
          }
        },
        "aws-cdk-lib.aws_kendraranking": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KendraRanking"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kendraranking"
            },
            "python": {
              "module": "aws_cdk.aws_kendraranking"
            }
          }
        },
        "aws-cdk-lib.aws_kinesis": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Kinesis"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesis"
            },
            "python": {
              "module": "aws_cdk.aws_kinesis"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalytics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalytics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalytics"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalytics"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisanalyticsv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisAnalyticsV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisanalyticsv2"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisanalyticsv2"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisfirehose": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisFirehose"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisfirehose"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisfirehose"
            }
          }
        },
        "aws-cdk-lib.aws_kinesisvideo": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KinesisVideo"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kinesisvideo"
            },
            "python": {
              "module": "aws_cdk.aws_kinesisvideo"
            }
          }
        },
        "aws-cdk-lib.aws_kms": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.KMS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.kms"
            },
            "python": {
              "module": "aws_cdk.aws_kms"
            }
          }
        },
        "aws-cdk-lib.aws_lakeformation": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LakeFormation"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lakeformation"
            },
            "python": {
              "module": "aws_cdk.aws_lakeformation"
            }
          }
        },
        "aws-cdk-lib.aws_lambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda"
            },
            "python": {
              "module": "aws_cdk.aws_lambda"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_event_sources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.EventSources"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.eventsources"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_event_sources"
            }
          }
        },
        "aws-cdk-lib.aws_lambda_nodejs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lambda.Nodejs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lambda.nodejs"
            },
            "python": {
              "module": "aws_cdk.aws_lambda_nodejs"
            }
          }
        },
        "aws-cdk-lib.aws_lex": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lex"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lex"
            },
            "python": {
              "module": "aws_cdk.aws_lex"
            }
          }
        },
        "aws-cdk-lib.aws_licensemanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LicenseManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.licensemanager"
            },
            "python": {
              "module": "aws_cdk.aws_licensemanager"
            }
          }
        },
        "aws-cdk-lib.aws_lightsail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Lightsail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lightsail"
            },
            "python": {
              "module": "aws_cdk.aws_lightsail"
            }
          }
        },
        "aws-cdk-lib.aws_location": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Location"
            },
            "java": {
              "package": "software.amazon.awscdk.services.location"
            },
            "python": {
              "module": "aws_cdk.aws_location"
            }
          }
        },
        "aws-cdk-lib.aws_logs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs"
            },
            "python": {
              "module": "aws_cdk.aws_logs"
            }
          }
        },
        "aws-cdk-lib.aws_logs_destinations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Logs.Destinations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.logs.destinations"
            },
            "python": {
              "module": "aws_cdk.aws_logs_destinations"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutequipment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutEquipment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutequipment"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutequipment"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutmetrics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutMetrics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutmetrics"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutmetrics"
            }
          }
        },
        "aws-cdk-lib.aws_lookoutvision": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.LookoutVision"
            },
            "java": {
              "package": "software.amazon.awscdk.services.lookoutvision"
            },
            "python": {
              "module": "aws_cdk.aws_lookoutvision"
            }
          }
        },
        "aws-cdk-lib.aws_m2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.M2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.m2"
            },
            "python": {
              "module": "aws_cdk.aws_m2"
            }
          }
        },
        "aws-cdk-lib.aws_macie": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Macie"
            },
            "java": {
              "package": "software.amazon.awscdk.services.macie"
            },
            "python": {
              "module": "aws_cdk.aws_macie"
            }
          }
        },
        "aws-cdk-lib.aws_managedblockchain": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ManagedBlockchain"
            },
            "java": {
              "package": "software.amazon.awscdk.services.managedblockchain"
            },
            "python": {
              "module": "aws_cdk.aws_managedblockchain"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconnect": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconnect"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconnect"
            }
          }
        },
        "aws-cdk-lib.aws_mediaconvert": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaConvert"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediaconvert"
            },
            "python": {
              "module": "aws_cdk.aws_mediaconvert"
            }
          }
        },
        "aws-cdk-lib.aws_medialive": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaLive"
            },
            "java": {
              "package": "software.amazon.awscdk.services.medialive"
            },
            "python": {
              "module": "aws_cdk.aws_medialive"
            }
          }
        },
        "aws-cdk-lib.aws_mediapackage": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaPackage"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediapackage"
            },
            "python": {
              "module": "aws_cdk.aws_mediapackage"
            }
          }
        },
        "aws-cdk-lib.aws_mediapackagev2": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.MediaPackageV2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediapackagev2"
            },
            "python": {
              "module": "aws_cdk.aws_mediapackagev2"
            }
          }
        },
        "aws-cdk-lib.aws_mediastore": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaStore"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediastore"
            },
            "python": {
              "module": "aws_cdk.aws_mediastore"
            }
          }
        },
        "aws-cdk-lib.aws_mediatailor": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MediaTailor"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mediatailor"
            },
            "python": {
              "module": "aws_cdk.aws_mediatailor"
            }
          }
        },
        "aws-cdk-lib.aws_memorydb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MemoryDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.memorydb"
            },
            "python": {
              "module": "aws_cdk.aws_memorydb"
            }
          }
        },
        "aws-cdk-lib.aws_msk": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MSK"
            },
            "java": {
              "package": "software.amazon.awscdk.services.msk"
            },
            "python": {
              "module": "aws_cdk.aws_msk"
            }
          }
        },
        "aws-cdk-lib.aws_mwaa": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.MWAA"
            },
            "java": {
              "package": "software.amazon.awscdk.services.mwaa"
            },
            "python": {
              "module": "aws_cdk.aws_mwaa"
            }
          }
        },
        "aws-cdk-lib.aws_neptune": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Neptune"
            },
            "java": {
              "package": "software.amazon.awscdk.services.neptune"
            },
            "python": {
              "module": "aws_cdk.aws_neptune"
            }
          }
        },
        "aws-cdk-lib.aws_neptunegraph": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.NeptuneGraph"
            },
            "java": {
              "package": "software.amazon.awscdk.services.neptunegraph"
            },
            "python": {
              "module": "aws_cdk.aws_neptunegraph"
            }
          }
        },
        "aws-cdk-lib.aws_networkfirewall": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkFirewall"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkfirewall"
            },
            "python": {
              "module": "aws_cdk.aws_networkfirewall"
            }
          }
        },
        "aws-cdk-lib.aws_networkmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NetworkManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.networkmanager"
            },
            "python": {
              "module": "aws_cdk.aws_networkmanager"
            }
          }
        },
        "aws-cdk-lib.aws_nimblestudio": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.NimbleStudio"
            },
            "java": {
              "package": "software.amazon.awscdk.services.nimblestudio"
            },
            "python": {
              "module": "aws_cdk.aws_nimblestudio"
            }
          }
        },
        "aws-cdk-lib.aws_oam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Oam"
            },
            "java": {
              "package": "software.amazon.awscdk.services.oam"
            },
            "python": {
              "module": "aws_cdk.aws_oam"
            }
          }
        },
        "aws-cdk-lib.aws_omics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Omics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.omics"
            },
            "python": {
              "module": "aws_cdk.aws_omics"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchserverless"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchserverless"
            }
          }
        },
        "aws-cdk-lib.aws_opensearchservice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpenSearchService"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opensearchservice"
            },
            "python": {
              "module": "aws_cdk.aws_opensearchservice"
            }
          }
        },
        "aws-cdk-lib.aws_opsworks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworks"
            },
            "python": {
              "module": "aws_cdk.aws_opsworks"
            }
          }
        },
        "aws-cdk-lib.aws_opsworkscm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.OpsWorksCM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.opsworkscm"
            },
            "python": {
              "module": "aws_cdk.aws_opsworkscm"
            }
          }
        },
        "aws-cdk-lib.aws_organizations": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Organizations"
            },
            "java": {
              "package": "software.amazon.awscdk.services.organizations"
            },
            "python": {
              "module": "aws_cdk.aws_organizations"
            }
          }
        },
        "aws-cdk-lib.aws_osis": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.OSIS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.osis"
            },
            "python": {
              "module": "aws_cdk.aws_osis"
            }
          }
        },
        "aws-cdk-lib.aws_panorama": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Panorama"
            },
            "java": {
              "package": "software.amazon.awscdk.services.panorama"
            },
            "python": {
              "module": "aws_cdk.aws_panorama"
            }
          }
        },
        "aws-cdk-lib.aws_pcaconnectorad": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.PCAConnectorAD"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pcaconnectorad"
            },
            "python": {
              "module": "aws_cdk.aws_pcaconnectorad"
            }
          }
        },
        "aws-cdk-lib.aws_personalize": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Personalize"
            },
            "java": {
              "package": "software.amazon.awscdk.services.personalize"
            },
            "python": {
              "module": "aws_cdk.aws_personalize"
            }
          }
        },
        "aws-cdk-lib.aws_pinpoint": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pinpoint"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpoint"
            },
            "python": {
              "module": "aws_cdk.aws_pinpoint"
            }
          }
        },
        "aws-cdk-lib.aws_pinpointemail": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.PinpointEmail"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pinpointemail"
            },
            "python": {
              "module": "aws_cdk.aws_pinpointemail"
            }
          }
        },
        "aws-cdk-lib.aws_pipes": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Pipes"
            },
            "java": {
              "package": "software.amazon.awscdk.services.pipes"
            },
            "python": {
              "module": "aws_cdk.aws_pipes"
            }
          }
        },
        "aws-cdk-lib.aws_proton": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Proton"
            },
            "java": {
              "package": "software.amazon.awscdk.services.proton"
            },
            "python": {
              "module": "aws_cdk.aws_proton"
            }
          }
        },
        "aws-cdk-lib.aws_qldb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QLDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.qldb"
            },
            "python": {
              "module": "aws_cdk.aws_qldb"
            }
          }
        },
        "aws-cdk-lib.aws_quicksight": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.QuickSight"
            },
            "java": {
              "package": "software.amazon.awscdk.services.quicksight"
            },
            "python": {
              "module": "aws_cdk.aws_quicksight"
            }
          }
        },
        "aws-cdk-lib.aws_ram": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ram"
            },
            "python": {
              "module": "aws_cdk.aws_ram"
            }
          }
        },
        "aws-cdk-lib.aws_rds": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RDS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rds"
            },
            "python": {
              "module": "aws_cdk.aws_rds"
            }
          }
        },
        "aws-cdk-lib.aws_redshift": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Redshift"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshift"
            },
            "python": {
              "module": "aws_cdk.aws_redshift"
            }
          }
        },
        "aws-cdk-lib.aws_redshiftserverless": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RedshiftServerless"
            },
            "java": {
              "package": "software.amazon.awscdk.services.redshiftserverless"
            },
            "python": {
              "module": "aws_cdk.aws_redshiftserverless"
            }
          }
        },
        "aws-cdk-lib.aws_refactorspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RefactorSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.refactorspaces"
            },
            "python": {
              "module": "aws_cdk.aws_refactorspaces"
            }
          }
        },
        "aws-cdk-lib.aws_rekognition": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Rekognition"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rekognition"
            },
            "python": {
              "module": "aws_cdk.aws_rekognition"
            }
          }
        },
        "aws-cdk-lib.aws_resiliencehub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResilienceHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resiliencehub"
            },
            "python": {
              "module": "aws_cdk.aws_resiliencehub"
            }
          }
        },
        "aws-cdk-lib.aws_resourceexplorer2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceExplorer2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourceexplorer2"
            },
            "python": {
              "module": "aws_cdk.aws_resourceexplorer2"
            }
          }
        },
        "aws-cdk-lib.aws_resourcegroups": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ResourceGroups"
            },
            "java": {
              "package": "software.amazon.awscdk.services.resourcegroups"
            },
            "python": {
              "module": "aws_cdk.aws_resourcegroups"
            }
          }
        },
        "aws-cdk-lib.aws_robomaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RoboMaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.robomaker"
            },
            "python": {
              "module": "aws_cdk.aws_robomaker"
            }
          }
        },
        "aws-cdk-lib.aws_rolesanywhere": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RolesAnywhere"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rolesanywhere"
            },
            "python": {
              "module": "aws_cdk.aws_rolesanywhere"
            }
          }
        },
        "aws-cdk-lib.aws_route53": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53"
            },
            "python": {
              "module": "aws_cdk.aws_route53"
            }
          }
        },
        "aws-cdk-lib.aws_route53_patterns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Patterns"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.patterns"
            },
            "python": {
              "module": "aws_cdk.aws_route53_patterns"
            }
          }
        },
        "aws-cdk-lib.aws_route53_targets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53.Targets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53.targets"
            },
            "python": {
              "module": "aws_cdk.aws_route53_targets"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoverycontrol": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryControl"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoverycontrol"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoverycontrol"
            }
          }
        },
        "aws-cdk-lib.aws_route53recoveryreadiness": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53RecoveryReadiness"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53recoveryreadiness"
            },
            "python": {
              "module": "aws_cdk.aws_route53recoveryreadiness"
            }
          }
        },
        "aws-cdk-lib.aws_route53resolver": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Route53Resolver"
            },
            "java": {
              "package": "software.amazon.awscdk.services.route53resolver"
            },
            "python": {
              "module": "aws_cdk.aws_route53resolver"
            }
          }
        },
        "aws-cdk-lib.aws_rum": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.RUM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.rum"
            },
            "python": {
              "module": "aws_cdk.aws_rum"
            }
          }
        },
        "aws-cdk-lib.aws_s3": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3"
            },
            "python": {
              "module": "aws_cdk.aws_s3"
            }
          }
        },
        "aws-cdk-lib.aws_s3_assets": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Assets"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.assets"
            },
            "python": {
              "module": "aws_cdk.aws_s3_assets"
            }
          }
        },
        "aws-cdk-lib.aws_s3_deployment": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Deployment"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.deployment"
            },
            "python": {
              "module": "aws_cdk.aws_s3_deployment"
            }
          }
        },
        "aws-cdk-lib.aws_s3_notifications": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3.Notifications"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3.notifications"
            },
            "python": {
              "module": "aws_cdk.aws_s3_notifications"
            }
          }
        },
        "aws-cdk-lib.aws_s3express": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.S3Express"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3express"
            },
            "python": {
              "module": "aws_cdk.aws_s3express"
            }
          }
        },
        "aws-cdk-lib.aws_s3objectlambda": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3ObjectLambda"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3objectlambda"
            },
            "python": {
              "module": "aws_cdk.aws_s3objectlambda"
            }
          }
        },
        "aws-cdk-lib.aws_s3outposts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.S3Outposts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.s3outposts"
            },
            "python": {
              "module": "aws_cdk.aws_s3outposts"
            }
          }
        },
        "aws-cdk-lib.aws_sagemaker": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Sagemaker"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sagemaker"
            },
            "python": {
              "module": "aws_cdk.aws_sagemaker"
            }
          }
        },
        "aws-cdk-lib.aws_sam": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SAM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sam"
            },
            "python": {
              "module": "aws_cdk.aws_sam"
            }
          }
        },
        "aws-cdk-lib.aws_scheduler": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Scheduler"
            },
            "java": {
              "package": "software.amazon.awscdk.services.scheduler"
            },
            "python": {
              "module": "aws_cdk.aws_scheduler"
            }
          }
        },
        "aws-cdk-lib.aws_sdb": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SDB"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sdb"
            },
            "python": {
              "module": "aws_cdk.aws_sdb"
            }
          }
        },
        "aws-cdk-lib.aws_secretsmanager": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecretsManager"
            },
            "java": {
              "package": "software.amazon.awscdk.services.secretsmanager"
            },
            "python": {
              "module": "aws_cdk.aws_secretsmanager"
            }
          }
        },
        "aws-cdk-lib.aws_securityhub": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SecurityHub"
            },
            "java": {
              "package": "software.amazon.awscdk.services.securityhub"
            },
            "python": {
              "module": "aws_cdk.aws_securityhub"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalog": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalog"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalog"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalog"
            }
          }
        },
        "aws-cdk-lib.aws_servicecatalogappregistry": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Servicecatalogappregistry"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicecatalogappregistry"
            },
            "python": {
              "module": "aws_cdk.aws_servicecatalogappregistry"
            }
          }
        },
        "aws-cdk-lib.aws_servicediscovery": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.ServiceDiscovery"
            },
            "java": {
              "package": "software.amazon.awscdk.services.servicediscovery"
            },
            "python": {
              "module": "aws_cdk.aws_servicediscovery"
            }
          }
        },
        "aws-cdk-lib.aws_ses": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses"
            },
            "python": {
              "module": "aws_cdk.aws_ses"
            }
          }
        },
        "aws-cdk-lib.aws_ses_actions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SES.Actions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ses.actions"
            },
            "python": {
              "module": "aws_cdk.aws_ses_actions"
            }
          }
        },
        "aws-cdk-lib.aws_shield": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.Shield"
            },
            "java": {
              "package": "software.amazon.awscdk.services.shield"
            },
            "python": {
              "module": "aws_cdk.aws_shield"
            }
          }
        },
        "aws-cdk-lib.aws_signer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Signer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.signer"
            },
            "python": {
              "module": "aws_cdk.aws_signer"
            }
          }
        },
        "aws-cdk-lib.aws_simspaceweaver": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SimSpaceWeaver"
            },
            "java": {
              "package": "software.amazon.awscdk.services.simspaceweaver"
            },
            "python": {
              "module": "aws_cdk.aws_simspaceweaver"
            }
          }
        },
        "aws-cdk-lib.aws_sns": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns"
            },
            "python": {
              "module": "aws_cdk.aws_sns"
            }
          }
        },
        "aws-cdk-lib.aws_sns_subscriptions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SNS.Subscriptions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sns.subscriptions"
            },
            "python": {
              "module": "aws_cdk.aws_sns_subscriptions"
            }
          }
        },
        "aws-cdk-lib.aws_sqs": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SQS"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sqs"
            },
            "python": {
              "module": "aws_cdk.aws_sqs"
            }
          }
        },
        "aws-cdk-lib.aws_ssm": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSM"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssm"
            },
            "python": {
              "module": "aws_cdk.aws_ssm"
            }
          }
        },
        "aws-cdk-lib.aws_ssmcontacts": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMContacts"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmcontacts"
            },
            "python": {
              "module": "aws_cdk.aws_ssmcontacts"
            }
          }
        },
        "aws-cdk-lib.aws_ssmguiconnect": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.SSMGuiConnect"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmguiconnect"
            },
            "python": {
              "module": "aws_cdk.aws_ssmguiconnect"
            }
          }
        },
        "aws-cdk-lib.aws_ssmincidents": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSMIncidents"
            },
            "java": {
              "package": "software.amazon.awscdk.services.ssmincidents"
            },
            "python": {
              "module": "aws_cdk.aws_ssmincidents"
            }
          }
        },
        "aws-cdk-lib.aws_sso": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SSO"
            },
            "java": {
              "package": "software.amazon.awscdk.services.sso"
            },
            "python": {
              "module": "aws_cdk.aws_sso"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions"
            }
          }
        },
        "aws-cdk-lib.aws_stepfunctions_tasks": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.StepFunctions.Tasks"
            },
            "java": {
              "package": "software.amazon.awscdk.services.stepfunctions.tasks"
            },
            "python": {
              "module": "aws_cdk.aws_stepfunctions_tasks"
            }
          }
        },
        "aws-cdk-lib.aws_supportapp": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SupportApp"
            },
            "java": {
              "package": "software.amazon.awscdk.services.supportapp"
            },
            "python": {
              "module": "aws_cdk.aws_supportapp"
            }
          }
        },
        "aws-cdk-lib.aws_synthetics": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Synthetics"
            },
            "java": {
              "package": "software.amazon.awscdk.services.synthetics"
            },
            "python": {
              "module": "aws_cdk.aws_synthetics"
            }
          }
        },
        "aws-cdk-lib.aws_systemsmanagersap": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.SystemsManagerSAP"
            },
            "java": {
              "package": "software.amazon.awscdk.services.systemsmanagersap"
            },
            "python": {
              "module": "aws_cdk.aws_systemsmanagersap"
            }
          }
        },
        "aws-cdk-lib.aws_timestream": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Timestream"
            },
            "java": {
              "package": "software.amazon.awscdk.services.timestream"
            },
            "python": {
              "module": "aws_cdk.aws_timestream"
            }
          }
        },
        "aws-cdk-lib.aws_transfer": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Transfer"
            },
            "java": {
              "package": "software.amazon.awscdk.services.transfer"
            },
            "python": {
              "module": "aws_cdk.aws_transfer"
            }
          }
        },
        "aws-cdk-lib.aws_verifiedpermissions": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.VerifiedPermissions"
            },
            "java": {
              "package": "software.amazon.awscdk.services.verifiedpermissions"
            },
            "python": {
              "module": "aws_cdk.aws_verifiedpermissions"
            }
          }
        },
        "aws-cdk-lib.aws_voiceid": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.VoiceID"
            },
            "java": {
              "package": "software.amazon.awscdk.services.voiceid"
            },
            "python": {
              "module": "aws_cdk.aws_voiceid"
            }
          }
        },
        "aws-cdk-lib.aws_vpclattice": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.VpcLattice"
            },
            "java": {
              "package": "software.amazon.awscdk.services.vpclattice"
            },
            "python": {
              "module": "aws_cdk.aws_vpclattice"
            }
          }
        },
        "aws-cdk-lib.aws_waf": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAF"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf"
            },
            "python": {
              "module": "aws_cdk.aws_waf"
            }
          }
        },
        "aws-cdk-lib.aws_wafregional": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFRegional"
            },
            "java": {
              "package": "software.amazon.awscdk.services.waf.regional"
            },
            "python": {
              "module": "aws_cdk.aws_wafregional"
            }
          }
        },
        "aws-cdk-lib.aws_wafv2": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WAFv2"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wafv2"
            },
            "python": {
              "module": "aws_cdk.aws_wafv2"
            }
          }
        },
        "aws-cdk-lib.aws_wisdom": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.Wisdom"
            },
            "java": {
              "package": "software.amazon.awscdk.services.wisdom"
            },
            "python": {
              "module": "aws_cdk.aws_wisdom"
            }
          }
        },
        "aws-cdk-lib.aws_workspaces": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.WorkSpaces"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspaces"
            },
            "python": {
              "module": "aws_cdk.aws_workspaces"
            }
          }
        },
        "aws-cdk-lib.aws_workspacesthinclient": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.WorkSpacesThinClient"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspacesthinclient"
            },
            "python": {
              "module": "aws_cdk.aws_workspacesthinclient"
            }
          }
        },
        "aws-cdk-lib.aws_workspacesweb": {
          "targets": {
            "dotnet": {
              "package": "Amazon.CDK.AWS.WorkSpacesWeb"
            },
            "java": {
              "package": "software.amazon.awscdk.services.workspacesweb"
            },
            "python": {
              "module": "aws_cdk.aws_workspacesweb"
            }
          }
        },
        "aws-cdk-lib.aws_xray": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.AWS.XRay"
            },
            "java": {
              "package": "software.amazon.awscdk.services.xray"
            },
            "python": {
              "module": "aws_cdk.aws_xray"
            }
          }
        },
        "aws-cdk-lib.cloud_assembly_schema": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CloudAssembly.Schema"
            },
            "java": {
              "package": "software.amazon.awscdk.cloudassembly.schema"
            },
            "python": {
              "module": "aws_cdk.cloud_assembly_schema"
            }
          }
        },
        "aws-cdk-lib.cloudformation_include": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CloudFormation.Include"
            },
            "java": {
              "package": "software.amazon.awscdk.cloudformation.include"
            },
            "python": {
              "module": "aws_cdk.cloudformation_include"
            }
          }
        },
        "aws-cdk-lib.custom_resources": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CustomResources"
            },
            "java": {
              "package": "software.amazon.awscdk.customresources"
            },
            "python": {
              "module": "aws_cdk.custom_resources"
            }
          }
        },
        "aws-cdk-lib.cx_api": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.CXAPI"
            },
            "java": {
              "package": "software.amazon.awscdk.cxapi"
            },
            "python": {
              "module": "aws_cdk.cx_api"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_awscli": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.AwsCli"
            },
            "java": {
              "package": "software.amazon.awscdk.lambdalayer.awscli"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_awscli"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_kubectl": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.Kubectl"
            },
            "java": {
              "package": "software.amazon.awscdk.lambdalayer.kubectl"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_kubectl"
            }
          }
        },
        "aws-cdk-lib.lambda_layer_node_proxy_agent": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.LambdaLayer.NodeProxyAgent"
            },
            "java": {
              "package": "software.amazon.awscdk.lambda.layer.node.proxy.agent"
            },
            "python": {
              "module": "aws_cdk.lambda_layer_node_proxy_agent"
            }
          }
        },
        "aws-cdk-lib.pipelines": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Pipelines"
            },
            "java": {
              "package": "software.amazon.awscdk.pipelines"
            },
            "python": {
              "module": "aws_cdk.pipelines"
            }
          }
        },
        "aws-cdk-lib.region_info": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.RegionInfo"
            },
            "java": {
              "package": "software.amazon.awscdk.regioninfo"
            },
            "python": {
              "module": "aws_cdk.region_info"
            }
          }
        },
        "aws-cdk-lib.triggers": {
          "targets": {
            "dotnet": {
              "namespace": "Amazon.CDK.Triggers"
            },
            "java": {
              "package": "software.amazon.awscdk.triggers"
            },
            "python": {
              "module": "aws_cdk.triggers"
            }
          }
        }
      },
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK.Lib"
        },
        "go": {
          "moduleName": "github.com/aws/aws-cdk-go",
          "packageName": "awscdk"
        },
        "java": {
          "maven": {
            "artifactId": "aws-cdk-lib",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk"
        },
        "js": {
          "npm": "aws-cdk-lib"
        },
        "python": {
          "distName": "aws-cdk-lib",
          "module": "aws_cdk"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::AppRunner",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "5.3.12 (build f9c1b68)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "AWS::AppRunner",
    "aws-apprunner"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-apprunner-alpha",
  "readme": {
    "markdown": "# AWS::AppRunner Construct Library\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\nThis module is part of the [AWS Cloud Development Kit](https://github.com/aws/aws-cdk) project.\n\n```ts nofixture\nimport * as apprunner from '@aws-cdk/aws-apprunner-alpha';\n```\n\n## Introduction\n\nAWS App Runner is a fully managed service that makes it easy for developers to quickly deploy containerized web applications and APIs, at scale and with no prior infrastructure experience required. Start with your source code or a container image. App Runner automatically builds and deploys the web application and load balances traffic with encryption. App Runner also scales up or down automatically to meet your traffic needs. With App Runner, rather than thinking about servers or scaling, you have more time to focus on your applications.\n\n## Service\n\nThe `Service` construct allows you to create AWS App Runner services with `ECR Public`, `ECR` or `Github` with the `source` property in the following scenarios:\n\n- `Source.fromEcr()` - To define the source repository from `ECR`.\n- `Source.fromEcrPublic()` - To define the source repository from `ECR Public`.\n- `Source.fromGitHub()` - To define the source repository from the `Github repository`.\n- `Source.fromAsset()` - To define the source from local asset directory.\n\n\nThe `Service` construct implements `IGrantable`.\n\n## ECR Public\n\nTo create a `Service` with ECR Public:\n\n```ts\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n```\n\n## ECR\n\nTo create a `Service` from an existing ECR repository:\n\n```ts\nimport * as ecr from 'aws-cdk-lib/aws-ecr';\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});\n```\n\nTo create a `Service` from local docker image asset directory built and pushed to Amazon ECR:\n\nYou can specify whether to enable continuous integration from the source repository with the `autoDeploymentsEnabled` flag.\n\n```ts\nimport * as assets from 'aws-cdk-lib/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n  autoDeploymentsEnabled: true,\n});\n```\n\n## GitHub\n\nTo create a `Service` from the GitHub repository, you need to specify an existing App Runner `Connection`.\n\nSee [Managing App Runner connections](https://docs.aws.amazon.com/apprunner/latest/dg/manage-connections.html) for more details.\n\n```ts\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n```\n\nUse `codeConfigurationValues` to override configuration values with the `API` configuration source type.\n\n```ts\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});\n```\n\n## IAM Roles\n\nYou are allowed to define `instanceRole` and `accessRole` for the `Service`.\n\n`instanceRole` - The IAM role that provides permissions to your App Runner service. These are permissions that\nyour code needs when it calls any AWS APIs. If not defined, a new instance role will be generated\nwhen required.\n\nTo add IAM policy statements to this role, use `addToRolePolicy()`:\n\n```ts\nimport * as iam from 'aws-cdk-lib/aws-iam';\n\nconst service = new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n\nservice.addToRolePolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['s3:GetObject'],\n  resources: ['*'],\n}))\n```\n\n`accessRole` - The IAM role that grants the App Runner service access to a source repository. It's required for\nECR image repositories (but not for ECR Public repositories). If not defined, a new access role will be generated\nwhen required.\n\nSee [App Runner IAM Roles](https://docs.aws.amazon.com/apprunner/latest/dg/security_iam_service-with-iam.html#security_iam_service-with-iam-roles) for more details.\n\n## VPC Connector\n\nTo associate an App Runner service with a custom VPC, define `vpcConnector` for the service.\n\n```ts\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  ipAddresses: ec2.IpAddresses.cidr('10.0.0.0/16')\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});\n```\n\n## Secrets Manager\n\nTo include environment variables integrated with AWS Secrets Manager, use the `environmentSecrets` attribute.\nYou can use the `addSecret` method from the App Runner `Service` class to include secrets from outside the\nservice definition.\n\n```ts\nimport * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';\nimport * as ssm from 'aws-cdk-lib/aws-ssm';\n\ndeclare const stack: Stack;\n\nconst secret = new secretsmanager.Secret(stack, 'Secret');\nconst parameter = ssm.StringParameter.fromSecureStringParameterAttributes(stack, 'Parameter', {\n  parameterName: '/name',\n  version: 1,\n});\n\nconst service = new apprunner.Service(stack, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: {\n      port: 8000,\n      environmentSecrets: {\n        SECRET: apprunner.Secret.fromSecretsManager(secret),\n        PARAMETER: apprunner.Secret.fromSsmParameter(parameter),\n        SECRET_ID: apprunner.Secret.fromSecretsManagerVersion(secret, { versionId: 'version-id' }),\n        SECRET_STAGE: apprunner.Secret.fromSecretsManagerVersion(secret, { versionStage: 'version-stage' }),\n      },\n    },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  })\n});\n\nservice.addSecret('LATER_SECRET', apprunner.Secret.fromSecretsManager(secret, 'field'));\n```\n\n## HealthCheck\n\nTo configure the health check for the service, use the `healthCheck` attribute.\n\nYou can specify it by static methods `HealthCheck.http` or `HealthCheck.tcp`.\n\n```ts\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  healthCheck: apprunner.HealthCheck.http({\n    healthyThreshold: 5,\n    interval: Duration.seconds(10),\n    path: '/',\n    timeout: Duration.seconds(10),\n    unhealthyThreshold: 10,\n  }),\n});\n```\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-apprunner-alpha",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "assemblyOriginatorKeyFile": "../../key.snk",
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/main/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.AppRunner.Alpha",
      "packageId": "Amazon.CDK.AWS.AppRunner.Alpha",
      "signAssembly": true
    },
    "go": {
      "moduleName": "github.com/aws/aws-cdk-go",
      "packageName": "awscdkapprunneralpha"
    },
    "java": {
      "maven": {
        "artifactId": "apprunner-alpha",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.apprunner.alpha"
    },
    "js": {
      "npm": "@aws-cdk/aws-apprunner-alpha"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 2"
      ],
      "distName": "aws-cdk.aws-apprunner-alpha",
      "module": "aws_cdk.aws_apprunner_alpha"
    }
  },
  "types": {
    "@aws-cdk/aws-apprunner-alpha.AssetProps": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the image repository for `Source.fromAsset()`.",
        "example": "import * as assets from 'aws-cdk-lib/aws-ecr-assets';\n\nconst imageAsset = new assets.DockerImageAsset(this, 'ImageAssets', {\n  directory: path.join(__dirname, './docker.assets'),\n});\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromAsset({\n    imageConfiguration: { port: 8000 },\n    asset: imageAsset,\n  }),\n  autoDeploymentsEnabled: true,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.AssetProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 359
      },
      "name": "AssetProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Represents the docker image asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 370
          },
          "name": "asset",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecr_assets.DockerImageAsset"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "The image configuration for the image built from the asset."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 365
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ImageConfiguration"
          }
        }
      ],
      "symbolId": "lib/service:AssetProps"
    },
    "@aws-cdk/aws-apprunner-alpha.AssetSource": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "base": "@aws-cdk/aws-apprunner-alpha.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the source from local assets.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nimport { aws_ecr_assets as ecr_assets } from 'aws-cdk-lib';\n\ndeclare const dockerImageAsset: ecr_assets.DockerImageAsset;\ndeclare const secret: apprunner_alpha.Secret;\nconst assetSource = new apprunner_alpha.AssetSource({\n  asset: dockerImageAsset,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    environmentSecrets: {\n      environmentSecretsKey: secret,\n    },\n    environmentVariables: {\n      environmentVariablesKey: 'environmentVariables',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.AssetSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 505
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.AssetProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 503
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 509
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner-alpha.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.SourceConfig"
            }
          }
        }
      ],
      "name": "AssetSource",
      "symbolId": "lib/service:AssetSource"
    },
    "@aws-cdk/aws-apprunner-alpha.CodeConfiguration": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfiguration.html",
        "stability": "experimental",
        "summary": "Describes the configuration that AWS App Runner uses to build and run an App Runner service from a source code repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\n\ndeclare const runtime: apprunner_alpha.Runtime;\ndeclare const secret: apprunner_alpha.Secret;\nconst codeConfiguration: apprunner_alpha.CodeConfiguration = {\n  configurationSource: apprunner_alpha.ConfigurationSourceType.REPOSITORY,\n\n  // the properties below are optional\n  configurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    environmentSecrets: {\n      environmentSecretsKey: secret,\n    },\n    environmentVariables: {\n      environmentVariablesKey: 'environmentVariables',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.CodeConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 743
      },
      "name": "CodeConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the App Runner configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 756
          },
          "name": "configurationSource",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ConfigurationSourceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- not specified. Use `apprunner.yaml` instead.",
            "remarks": "Use it to quickly launch an App Runner service without providing a apprunner.yaml file in the\nsource code repository (or ignoring the file if it exists).",
            "stability": "experimental",
            "summary": "The basic configuration for building and running the App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 751
          },
          "name": "configurationValues",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.CodeConfigurationValues"
          }
        }
      ],
      "symbolId": "lib/service:CodeConfiguration"
    },
    "@aws-cdk/aws-apprunner-alpha.CodeConfigurationValues": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "remarks": "This type doesn't support the full set of possible configuration options. Fur full configuration capabilities,\nuse a `apprunner.yaml` file in the source code repository.",
        "stability": "experimental",
        "summary": "Describes the basic configuration needed for building and running an AWS App Runner service.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.CodeConfigurationValues",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 786
      },
      "name": "CodeConfigurationValues",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "It represents\na programming language runtime.",
            "stability": "experimental",
            "summary": "A runtime environment type for building and running an App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 805
          },
          "name": "runtime",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no build command.",
            "stability": "experimental",
            "summary": "The command App Runner runs to build your application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 792
          },
          "name": "buildCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables.",
            "deprecated": "use environmentVariables.",
            "stability": "deprecated",
            "summary": "The environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 813
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment secrets.",
            "stability": "experimental",
            "summary": "The environment secrets that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 827
          },
          "name": "environmentSecrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables.",
            "stability": "experimental",
            "summary": "The environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 820
          },
          "name": "environmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "8080",
            "stability": "experimental",
            "summary": "The port that your application listens to in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 799
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no start command.",
            "stability": "experimental",
            "summary": "The command App Runner runs to start your application."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 834
          },
          "name": "startCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:CodeConfigurationValues"
    },
    "@aws-cdk/aws-apprunner-alpha.CodeRepositoryProps": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the CodeRepository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\n\ndeclare const gitHubConnection: apprunner_alpha.GitHubConnection;\ndeclare const runtime: apprunner_alpha.Runtime;\ndeclare const secret: apprunner_alpha.Secret;\nconst codeRepositoryProps: apprunner_alpha.CodeRepositoryProps = {\n  codeConfiguration: {\n    configurationSource: apprunner_alpha.ConfigurationSourceType.REPOSITORY,\n\n    // the properties below are optional\n    configurationValues: {\n      runtime: runtime,\n\n      // the properties below are optional\n      buildCommand: 'buildCommand',\n      environment: {\n        environmentKey: 'environment',\n      },\n      environmentSecrets: {\n        environmentSecretsKey: secret,\n      },\n      environmentVariables: {\n        environmentVariablesKey: 'environmentVariables',\n      },\n      port: 'port',\n      startCommand: 'startCommand',\n    },\n  },\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n  sourceCodeVersion: {\n    type: 'type',\n    value: 'value',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.CodeRepositoryProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 615
      },
      "name": "CodeRepositoryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Configuration for building and running the service from a source code repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 619
          },
          "name": "codeConfiguration",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.CodeConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The App Runner connection for GitHub."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 634
          },
          "name": "connection",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.GitHubConnection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The location of the repository that contains the source code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 624
          },
          "name": "repositoryUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The version that should be used within the source code repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 629
          },
          "name": "sourceCodeVersion",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.SourceCodeVersion"
          }
        }
      ],
      "symbolId": "lib/service:CodeRepositoryProps"
    },
    "@aws-cdk/aws-apprunner-alpha.ConfigurationSourceType": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The source of the App Runner configuration.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.ConfigurationSourceType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 723
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "App Runner reads configuration values from `the apprunner.yaml` file in the source code repository and ignores `configurationValues`."
          },
          "name": "REPOSITORY"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "App Runner uses configuration values provided in `configurationValues` and ignores the `apprunner.yaml` file in the source code repository."
          },
          "name": "API"
        }
      ],
      "name": "ConfigurationSourceType",
      "symbolId": "lib/service:ConfigurationSourceType"
    },
    "@aws-cdk/aws-apprunner-alpha.Cpu": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The number of CPU units reserved for each instance of your App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nconst cpu = apprunner_alpha.Cpu.FOUR_VCPU;",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 31
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html#cfn-apprunner-service-instanceconfiguration-cpu",
            "stability": "experimental",
            "summary": "Custom CPU unit."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 64
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "custom CPU unit."
              },
              "name": "unit",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu"
            }
          },
          "static": true
        }
      ],
      "name": "Cpu",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "4 vCPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 55
          },
          "name": "FOUR_VCPU",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "0.5 vCPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 40
          },
          "name": "HALF_VCPU",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "1 vCPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 45
          },
          "name": "ONE_VCPU",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "0.25 vCPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 35
          },
          "name": "QUARTER_VCPU",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "2 vCPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 50
          },
          "name": "TWO_VCPU",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The unit of CPU."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 82
          },
          "name": "unit",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Cpu"
    },
    "@aws-cdk/aws-apprunner-alpha.EcrProps": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the image repository for `Source.fromEcr()`.",
        "example": "import * as ecr from 'aws-cdk-lib/aws-ecr';\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcr({\n    imageConfiguration: { port: 80 },\n    repository: ecr.Repository.fromRepositoryName(this, 'NginxRepository', 'nginx'),\n    tagOrDigest: 'latest',\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.EcrProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 329
      },
      "name": "EcrProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Represents the ECR repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 340
          },
          "name": "repository",
          "type": {
            "fqn": "aws-cdk-lib.aws_ecr.IRepository"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "The image configuration for the image from ECR."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 335
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ImageConfiguration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'latest'",
            "deprecated": "use `tagOrDigest`",
            "stability": "deprecated",
            "summary": "Image tag."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 347
          },
          "name": "tag",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- 'latest'",
            "stability": "experimental",
            "summary": "Image tag or digest (digests must start with `sha256:`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 353
          },
          "name": "tagOrDigest",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:EcrProps"
    },
    "@aws-cdk/aws-apprunner-alpha.EcrPublicProps": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the image repository for `Source.fromEcrPublic()`.",
        "example": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  ipAddresses: ec2.IpAddresses.cidr('10.0.0.0/16')\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.EcrPublicProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 312
      },
      "name": "EcrPublicProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ECR Public image URI."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 323
          },
          "name": "imageIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "The image configuration for the image from ECR Public."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 318
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ImageConfiguration"
          }
        }
      ],
      "symbolId": "lib/service:EcrPublicProps"
    },
    "@aws-cdk/aws-apprunner-alpha.EcrPublicSource": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "base": "@aws-cdk/aws-apprunner-alpha.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the service source from ECR Public.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\n\ndeclare const secret: apprunner_alpha.Secret;\nconst ecrPublicSource = new apprunner_alpha.EcrPublicSource({\n  imageIdentifier: 'imageIdentifier',\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    environmentSecrets: {\n      environmentSecretsKey: secret,\n    },\n    environmentVariables: {\n      environmentVariablesKey: 'environmentVariables',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.EcrPublicSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 485
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.EcrPublicProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 483
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 489
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner-alpha.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.SourceConfig"
            }
          }
        }
      ],
      "name": "EcrPublicSource",
      "symbolId": "lib/service:EcrPublicSource"
    },
    "@aws-cdk/aws-apprunner-alpha.EcrSource": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "base": "@aws-cdk/aws-apprunner-alpha.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the service source from ECR.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nimport { aws_ecr as ecr } from 'aws-cdk-lib';\n\ndeclare const repository: ecr.Repository;\ndeclare const secret: apprunner_alpha.Secret;\nconst ecrSource = new apprunner_alpha.EcrSource({\n  repository: repository,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    environmentSecrets: {\n      environmentSecretsKey: secret,\n    },\n    environmentVariables: {\n      environmentVariablesKey: 'environmentVariables',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n  tag: 'tag',\n  tagOrDigest: 'tagOrDigest',\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.EcrSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 462
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.EcrProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 460
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 466
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner-alpha.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.SourceConfig"
            }
          }
        }
      ],
      "name": "EcrSource",
      "symbolId": "lib/service:EcrSource"
    },
    "@aws-cdk/aws-apprunner-alpha.GitHubConnection": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "remarks": "It's required for GitHub code repositories.",
        "stability": "experimental",
        "summary": "Represents the App Runner connection that enables the App Runner service to connect to a source repository.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.GitHubConnection",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 855
        },
        "parameters": [
          {
            "name": "arn",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 841
      },
      "methods": [
        {
          "docs": {
            "returns": "Connection",
            "stability": "experimental",
            "summary": "Using existing App Runner connection by specifying the connection ARN."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 847
          },
          "name": "fromConnectionArn",
          "parameters": [
            {
              "docs": {
                "summary": "connection ARN."
              },
              "name": "arn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.GitHubConnection"
            }
          },
          "static": true
        }
      ],
      "name": "GitHubConnection",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the Connection for App Runner service to connect to the repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 854
          },
          "name": "connectionArn",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:GitHubConnection"
    },
    "@aws-cdk/aws-apprunner-alpha.GithubRepositoryProps": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the Github repository for `Source.fromGitHub()`.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.REPOSITORY,\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.GithubRepositoryProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 279
      },
      "name": "GithubRepositoryProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the App Runner configuration."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 289
          },
          "name": "configurationSource",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ConfigurationSourceType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "Only required for Github source.",
            "stability": "experimental",
            "summary": "ARN of the connection to Github."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 306
          },
          "name": "connection",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.GitHubConnection"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The location of the repository that contains the source code."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 294
          },
          "name": "repositoryUrl",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "main",
            "stability": "experimental",
            "summary": "The branch name that represents a specific version for the repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 301
          },
          "name": "branch",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no values will be passed. The `apprunner.yaml` from the github reopsitory will be used instead.",
            "remarks": "Will be ignored if configurationSource is `REPOSITORY`.",
            "stability": "experimental",
            "summary": "The code configuration values."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 284
          },
          "name": "codeConfigurationValues",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.CodeConfigurationValues"
          }
        }
      ],
      "symbolId": "lib/service:GithubRepositoryProps"
    },
    "@aws-cdk/aws-apprunner-alpha.GithubSource": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "base": "@aws-cdk/aws-apprunner-alpha.Source",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the service source from a Github repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\n\ndeclare const gitHubConnection: apprunner_alpha.GitHubConnection;\ndeclare const runtime: apprunner_alpha.Runtime;\ndeclare const secret: apprunner_alpha.Secret;\nconst githubSource = new apprunner_alpha.GithubSource({\n  configurationSource: apprunner_alpha.ConfigurationSourceType.REPOSITORY,\n  connection: gitHubConnection,\n  repositoryUrl: 'repositoryUrl',\n\n  // the properties below are optional\n  branch: 'branch',\n  codeConfigurationValues: {\n    runtime: runtime,\n\n    // the properties below are optional\n    buildCommand: 'buildCommand',\n    environment: {\n      environmentKey: 'environment',\n    },\n    environmentSecrets: {\n      environmentSecretsKey: secret,\n    },\n    environmentVariables: {\n      environmentVariablesKey: 'environmentVariables',\n    },\n    port: 'port',\n    startCommand: 'startCommand',\n  },\n});",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.GithubSource",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 435
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.GithubRepositoryProps"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 433
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 439
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-apprunner-alpha.Source",
          "parameters": [
            {
              "name": "_scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.SourceConfig"
            }
          }
        }
      ],
      "name": "GithubSource",
      "symbolId": "lib/service:GithubSource"
    },
    "@aws-cdk/aws-apprunner-alpha.HealthCheck": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Contains static factory methods for creating health checks for different protocols.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  healthCheck: apprunner.HealthCheck.http({\n    healthyThreshold: 5,\n    interval: Duration.seconds(10),\n    path: '/',\n    timeout: Duration.seconds(10),\n    unhealthyThreshold: 10,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.HealthCheck",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 928
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Construct a HTTP health check."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 932
          },
          "name": "http",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.HttpHealthCheckOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.HealthCheck"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Construct a TCP health check."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 946
          },
          "name": "tcp",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.TcpHealthCheckOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.HealthCheck"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 987
          },
          "name": "bind",
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_apprunner.CfnService.HealthCheckConfigurationProperty"
            }
          }
        }
      ],
      "name": "HealthCheck",
      "properties": [
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 957
          },
          "name": "healthCheckProtocolType",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.HealthCheckProtocolType"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 958
          },
          "name": "healthyThreshold",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 959
          },
          "name": "interval",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 960
          },
          "name": "timeout",
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 961
          },
          "name": "unhealthyThreshold",
          "type": {
            "primitive": "number"
          }
        },
        {
          "docs": {
            "stability": "experimental"
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 962
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:HealthCheck"
    },
    "@aws-cdk/aws-apprunner-alpha.HealthCheckProtocolType": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The health check protocol type."
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.HealthCheckProtocolType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 863
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "HTTP protocol."
          },
          "name": "HTTP"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "TCP protocol."
          },
          "name": "TCP"
        }
      ],
      "name": "HealthCheckProtocolType",
      "symbolId": "lib/service:HealthCheckProtocolType"
    },
    "@aws-cdk/aws-apprunner-alpha.HttpHealthCheckOptions": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties used to define HTTP Based healthchecks.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  healthCheck: apprunner.HealthCheck.http({\n    healthyThreshold: 5,\n    interval: Duration.seconds(10),\n    path: '/',\n    timeout: Duration.seconds(10),\n    unhealthyThreshold: 10,\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.HttpHealthCheckOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 911
      },
      "name": "HttpHealthCheckOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "The number of consecutive checks that must succeed before App Runner decides that the service is healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 884
          },
          "name": "healthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(5)",
            "stability": "experimental",
            "summary": "The time interval, in seconds, between health checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 891
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "/",
            "stability": "experimental",
            "summary": "The URL that health check requests are sent to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 917
          },
          "name": "path",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(2)",
            "stability": "experimental",
            "summary": "The time, in seconds, to wait for a health check response before deciding it failed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 898
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "5",
            "stability": "experimental",
            "summary": "The number of consecutive checks that must fail before App Runner decides that the service is unhealthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 905
          },
          "name": "unhealthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/service:HttpHealthCheckOptions"
    },
    "@aws-cdk/aws-apprunner-alpha.IService": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the App Runner Service."
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.IService",
      "interfaces": [
        "aws-cdk-lib.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 1027
      },
      "name": "IService",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1036
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1031
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:IService"
    },
    "@aws-cdk/aws-apprunner-alpha.IVpcConnector": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the App Runner VPC Connector."
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.IVpcConnector",
      "interfaces": [
        "aws-cdk-lib.IResource",
        "aws-cdk-lib.aws_ec2.IConnectable"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 66
      },
      "name": "IVpcConnector",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 77
          },
          "name": "vpcConnectorArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The Name of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 71
          },
          "name": "vpcConnectorName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The revision of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 83
          },
          "name": "vpcConnectorRevision",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:IVpcConnector"
    },
    "@aws-cdk/aws-apprunner-alpha.ImageConfiguration": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html",
        "stability": "experimental",
        "summary": "Describes the configuration that AWS App Runner uses to run an App Runner service using an image pulled from a source image repository.",
        "example": "import * as iam from 'aws-cdk-lib/aws-iam';\n\nconst service = new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n\nservice.addToRolePolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['s3:GetObject'],\n  resources: ['*'],\n}))",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.ImageConfiguration",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 527
      },
      "name": "ImageConfiguration",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables",
            "deprecated": "use environmentVariables.",
            "stability": "deprecated",
            "summary": "Environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 541
          },
          "name": "environment",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment secrets",
            "stability": "experimental",
            "summary": "Environment secrets that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 555
          },
          "name": "environmentSecrets",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.Secret"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no environment variables",
            "stability": "experimental",
            "summary": "Environment variables that are available to your running App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 548
          },
          "name": "environmentVariables",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "8080",
            "stability": "experimental",
            "summary": "The port that your application listens to in the container."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 533
          },
          "name": "port",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no start command",
            "remarks": "If specified, this command overrides the Docker image’s default start command.",
            "stability": "experimental",
            "summary": "An optional command that App Runner runs to start the application in the source image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 563
          },
          "name": "startCommand",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:ImageConfiguration"
    },
    "@aws-cdk/aws-apprunner-alpha.ImageRepository": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html",
        "stability": "experimental",
        "summary": "Describes a source image repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\n\ndeclare const secret: apprunner_alpha.Secret;\nconst imageRepository: apprunner_alpha.ImageRepository = {\n  imageIdentifier: 'imageIdentifier',\n  imageRepositoryType: apprunner_alpha.ImageRepositoryType.ECR_PUBLIC,\n\n  // the properties below are optional\n  imageConfiguration: {\n    environment: {\n      environmentKey: 'environment',\n    },\n    environmentSecrets: {\n      environmentSecretsKey: secret,\n    },\n    environmentVariables: {\n      environmentVariablesKey: 'environmentVariables',\n    },\n    port: 123,\n    startCommand: 'startCommand',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.ImageRepository",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 571
      },
      "name": "ImageRepository",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "remarks": "For `ECR_PUBLIC` imageRepositoryType, the identifier domain should\nalways be `public.ecr.aws`. For `ECR`, the pattern should be\n`([0-9]{12}.dkr.ecr.[a-z\\-]+-[0-9]{1}.amazonaws.com\\/.*)`.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imagerepository.html for more details.",
            "stability": "experimental",
            "summary": "The identifier of the image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 579
          },
          "name": "imageIdentifier",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "remarks": "This reflects the repository provider and whether\nthe repository is private or public.",
            "stability": "experimental",
            "summary": "The type of the image repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 585
          },
          "name": "imageRepositoryType",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ImageRepositoryType"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image configuration will be passed. The default `port` will be 8080.",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-imageconfiguration.html#cfn-apprunner-service-imageconfiguration-port",
            "stability": "experimental",
            "summary": "Configuration for running the identified image."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 592
          },
          "name": "imageConfiguration",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ImageConfiguration"
          }
        }
      ],
      "symbolId": "lib/service:ImageRepository"
    },
    "@aws-cdk/aws-apprunner-alpha.ImageRepositoryType": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The image repository types."
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.ImageRepositoryType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 15
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon ECR Public."
          },
          "name": "ECR_PUBLIC"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon ECR."
          },
          "name": "ECR"
        }
      ],
      "name": "ImageRepositoryType",
      "symbolId": "lib/service:ImageRepositoryType"
    },
    "@aws-cdk/aws-apprunner-alpha.Memory": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The amount of memory reserved for each instance of your App Runner service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nconst memory = apprunner_alpha.Memory.EIGHT_GB;",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.Memory",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 88
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-instanceconfiguration.html#cfn-apprunner-service-instanceconfiguration-memory",
            "stability": "experimental",
            "summary": "Custom Memory unit."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 141
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "custom Memory unit."
              },
              "name": "unit",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
            }
          },
          "static": true
        }
      ],
      "name": "Memory",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "8 GB(for 4 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 122
          },
          "name": "EIGHT_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "4 GB(for 1 or 2 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 112
          },
          "name": "FOUR_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "0.5 GB(for 0.25 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 92
          },
          "name": "HALF_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "1 GB(for 0.25 or 0.5 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 97
          },
          "name": "ONE_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "6 GB(for 2 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 117
          },
          "name": "SIX_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "10 GB(for 4 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 127
          },
          "name": "TEN_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "3 GB(for 1 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 107
          },
          "name": "THREE_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "12 GB(for 4 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 132
          },
          "name": "TWELVE_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "2 GB(for 1 vCPU)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 102
          },
          "name": "TWO_GB",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The unit of memory."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 159
          },
          "name": "unit",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Memory"
    },
    "@aws-cdk/aws-apprunner-alpha.Runtime": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "The code runtimes.",
        "example": "new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromGitHub({\n    repositoryUrl: 'https://github.com/aws-containers/hello-app-runner',\n    branch: 'main',\n    configurationSource: apprunner.ConfigurationSourceType.API,\n    codeConfigurationValues: {\n      runtime: apprunner.Runtime.PYTHON_3,\n      port: '8000',\n      startCommand: 'python app.py',\n      buildCommand: 'yum install -y pycairo && pip install -r requirements.txt',\n    },\n    connection: apprunner.GitHubConnection.fromConnectionArn('CONNECTION_ARN'),\n  }),\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime",
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 165
      },
      "methods": [
        {
          "docs": {
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-codeconfigurationvalues.html#cfn-apprunner-service-codeconfigurationvalues-runtime for all available runtimes.",
            "stability": "experimental",
            "summary": "Other runtimes."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 225
          },
          "name": "of",
          "parameters": [
            {
              "docs": {
                "summary": "runtime name."
              },
              "name": "name",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
            }
          },
          "static": true
        }
      ],
      "name": "Runtime",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "CORRETTO 11."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 175
          },
          "name": "CORRETTO_11",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "CORRETTO 8."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 170
          },
          "name": "CORRETTO_8",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": ".NET 6."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 180
          },
          "name": "DOTNET_6",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Go 1.18."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 185
          },
          "name": "GO_1",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "NodeJS 12."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 190
          },
          "name": "NODEJS_12",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "NodeJS 14."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 195
          },
          "name": "NODEJS_14",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "NodeJS 16."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 200
          },
          "name": "NODEJS_16",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "PHP 8.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 205
          },
          "name": "PHP_81",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Python 3."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 210
          },
          "name": "PYTHON_3",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Ruby 3.1."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 215
          },
          "name": "RUBY_31",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Runtime"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The runtime name."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 231
          },
          "name": "name",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Runtime"
    },
    "@aws-cdk/aws-apprunner-alpha.Secret": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "A secret environment variable.",
        "example": "import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';\nimport * as ssm from 'aws-cdk-lib/aws-ssm';\n\ndeclare const stack: Stack;\n\nconst secret = new secretsmanager.Secret(stack, 'Secret');\nconst parameter = ssm.StringParameter.fromSecureStringParameterAttributes(stack, 'Parameter', {\n  parameterName: '/name',\n  version: 1,\n});\n\nconst service = new apprunner.Service(stack, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: {\n      port: 8000,\n      environmentSecrets: {\n        SECRET: apprunner.Secret.fromSecretsManager(secret),\n        PARAMETER: apprunner.Secret.fromSsmParameter(parameter),\n        SECRET_ID: apprunner.Secret.fromSecretsManagerVersion(secret, { versionId: 'version-id' }),\n        SECRET_STAGE: apprunner.Secret.fromSecretsManagerVersion(secret, { versionStage: 'version-stage' }),\n      },\n    },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  })\n});\n\nservice.addSecret('LATER_SECRET', apprunner.Secret.fromSecretsManager(secret, 'field'));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.Secret",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 1042
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a environment variable value from a secret stored in AWS Secrets Manager."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1064
          },
          "name": "fromSecretsManager",
          "parameters": [
            {
              "docs": {
                "summary": "the secret stored in AWS Secrets Manager."
              },
              "name": "secret",
              "type": {
                "fqn": "aws-cdk-lib.aws_secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "remarks": "Only values in JSON format are supported.\nIf you do not specify a JSON field, then the full content of the secret is\nused.",
                "summary": "the name of the field with the value that you want to set as the environment variable value."
              },
              "name": "field",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.Secret"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates a environment variable value from a secret stored in AWS Secrets Manager."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1083
          },
          "name": "fromSecretsManagerVersion",
          "parameters": [
            {
              "docs": {
                "summary": "the secret stored in AWS Secrets Manager."
              },
              "name": "secret",
              "type": {
                "fqn": "aws-cdk-lib.aws_secretsmanager.ISecret"
              }
            },
            {
              "docs": {
                "summary": "the version information to reference the secret."
              },
              "name": "versionInfo",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.SecretVersionInfo"
              }
            },
            {
              "docs": {
                "remarks": "Only values in JSON format are supported.\nIf you do not specify a JSON field, then the full content of the secret is\nused.",
                "summary": "the name of the field with the value that you want to set as the environment variable value."
              },
              "name": "field",
              "optional": true,
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.Secret"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Creates an environment variable value from a parameter stored in AWS Systems Manager Parameter Store."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1047
          },
          "name": "fromSsmParameter",
          "parameters": [
            {
              "name": "parameter",
              "type": {
                "fqn": "aws-cdk-lib.aws_ssm.IParameter"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.Secret"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Grants reading the secret to a principal."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1104
          },
          "name": "grantRead",
          "parameters": [
            {
              "name": "grantee",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.IGrantable"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "aws-cdk-lib.aws_iam.Grant"
            }
          }
        }
      ],
      "name": "Secret",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1094
          },
          "name": "arn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether this secret uses a specific JSON field."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1099
          },
          "name": "hasField",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/service:Secret"
    },
    "@aws-cdk/aws-apprunner-alpha.SecretVersionInfo": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Specify the secret's version id or version stage.",
        "example": "import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';\nimport * as ssm from 'aws-cdk-lib/aws-ssm';\n\ndeclare const stack: Stack;\n\nconst secret = new secretsmanager.Secret(stack, 'Secret');\nconst parameter = ssm.StringParameter.fromSecureStringParameterAttributes(stack, 'Parameter', {\n  parameterName: '/name',\n  version: 1,\n});\n\nconst service = new apprunner.Service(stack, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: {\n      port: 8000,\n      environmentSecrets: {\n        SECRET: apprunner.Secret.fromSecretsManager(secret),\n        PARAMETER: apprunner.Secret.fromSsmParameter(parameter),\n        SECRET_ID: apprunner.Secret.fromSecretsManagerVersion(secret, { versionId: 'version-id' }),\n        SECRET_STAGE: apprunner.Secret.fromSecretsManagerVersion(secret, { versionStage: 'version-stage' }),\n      },\n    },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  })\n});\n\nservice.addSecret('LATER_SECRET', apprunner.Secret.fromSecretsManager(secret, 'field'));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.SecretVersionInfo",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 376
      },
      "name": "SecretVersionInfo",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- use default version id",
            "stability": "experimental",
            "summary": "version id of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 382
          },
          "name": "versionId",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- use default version stage",
            "stability": "experimental",
            "summary": "version stage of the secret."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 389
          },
          "name": "versionStage",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:SecretVersionInfo"
    },
    "@aws-cdk/aws-apprunner-alpha.Service": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "stability": "experimental",
        "summary": "The App Runner Service.",
        "example": "import * as iam from 'aws-cdk-lib/aws-iam';\n\nconst service = new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n\nservice.addToRolePolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['s3:GetObject'],\n  resources: ['*'],\n}))",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.Service",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/service.ts",
          "line": 1196
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.ServiceProps"
            }
          }
        ]
      },
      "interfaces": [
        "aws-cdk-lib.aws_iam.IGrantable"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 1110
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import from service attributes."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1129
          },
          "name": "fromServiceAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.ServiceAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.IService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import from service name."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1114
          },
          "name": "fromServiceName",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "serviceName",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.IService"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "This method adds an environment variable to the App Runner service."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1283
          },
          "name": "addEnvironmentVariable",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "value",
              "type": {
                "primitive": "string"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "This method adds a secret as environment variable to the App Runner service."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1293
          },
          "name": "addSecret",
          "parameters": [
            {
              "name": "name",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "secret",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.Secret"
              }
            }
          ]
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds a statement to the instance role."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1276
          },
          "name": "addToRolePolicy",
          "parameters": [
            {
              "name": "statement",
              "type": {
                "fqn": "aws-cdk-lib.aws_iam.PolicyStatement"
              }
            }
          ]
        }
      ],
      "name": "Service",
      "properties": [
        {
          "docs": {
            "deprecated": "use environmentVariables.",
            "stability": "deprecated",
            "summary": "Environment variables for this service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1155
          },
          "name": "environment",
          "type": {
            "collection": {
              "elementtype": {
                "primitive": "string"
              },
              "kind": "map"
            }
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The principal to grant permissions to."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1144
          },
          "name": "grantPrincipal",
          "overrides": "aws-cdk-lib.aws_iam.IGrantable",
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IPrincipal"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1171
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ID of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1177
          },
          "name": "serviceId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1194
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The status of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1189
          },
          "name": "serviceStatus",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The URL of the Service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1183
          },
          "name": "serviceUrl",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:Service"
    },
    "@aws-cdk/aws-apprunner-alpha.ServiceAttributes": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Attributes for the App Runner Service.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nconst serviceAttributes: apprunner_alpha.ServiceAttributes = {\n  serviceArn: 'serviceArn',\n  serviceName: 'serviceName',\n  serviceStatus: 'serviceStatus',\n  serviceUrl: 'serviceUrl',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.ServiceAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 1002
      },
      "name": "ServiceAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1011
          },
          "name": "serviceArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1006
          },
          "name": "serviceName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The status of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1021
          },
          "name": "serviceStatus",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The URL of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 1016
          },
          "name": "serviceUrl",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:ServiceAttributes"
    },
    "@aws-cdk/aws-apprunner-alpha.ServiceProps": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the AppRunner Service.",
        "example": "import * as iam from 'aws-cdk-lib/aws-iam';\n\nconst service = new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n\nservice.addToRolePolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['s3:GetObject'],\n  resources: ['*'],\n}))",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.ServiceProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 640
      },
      "name": "ServiceProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The source of the repository for the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 644
          },
          "name": "source",
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Source"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generate a new access role.",
            "remarks": "It's required for ECR image repositories (but not for ECR Public repositories).\n\nThe role must be assumable by the 'build.apprunner.amazonaws.com' service principal.",
            "see": "https://docs.aws.amazon.com/apprunner/latest/dg/security_iam_service-with-iam.html#security_iam_service-with-iam-roles-service.access",
            "stability": "experimental",
            "summary": "The IAM role that grants the App Runner service access to a source repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 682
          },
          "name": "accessRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no value will be passed.",
            "remarks": "If true, continuous integration from the source repository is enabled for the App Runner service.\nEach repository change (including any source code commit or new image version) starts a deployment.\nBy default, App Runner sets to false for a source image that uses an ECR Public repository or an ECR repository that's in an AWS account other than the one that the service is in.\nApp Runner sets to true in all other cases (which currently include a source code repository or a source image using a same-account ECR repository).",
            "stability": "experimental",
            "summary": "Specifies whether to enable continuous integration from the source repository."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 656
          },
          "name": "autoDeploymentsEnabled",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Cpu.ONE_VCPU",
            "stability": "experimental",
            "summary": "The number of CPU units reserved for each instance of your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 663
          },
          "name": "cpu",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Cpu"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no health check configuration",
            "remarks": "You can specify it by static methods `HealthCheck.http` or `HealthCheck.tcp`.",
            "stability": "experimental",
            "summary": "Settings for the health check that AWS App Runner performs to monitor the health of a service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 717
          },
          "name": "healthCheck",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.HealthCheck"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- generate a new instance role.",
            "remarks": "These are permissions that your code needs when it calls any AWS APIs.\n\nThe role must be assumable by the 'tasks.apprunner.amazonaws.com' service principal.",
            "see": "https://docs.aws.amazon.com/apprunner/latest/dg/security_iam_service-with-iam.html#security_iam_service-with-iam-roles-service.instance",
            "stability": "experimental",
            "summary": "The IAM role that provides permissions to your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 694
          },
          "name": "instanceRole",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Memory.TWO_GB",
            "stability": "experimental",
            "summary": "The amount of memory reserved for each instance of your App Runner service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 670
          },
          "name": "memory",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.Memory"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- auto-generated if undefined.",
            "stability": "experimental",
            "summary": "Name of the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 701
          },
          "name": "serviceName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no VPC connector, uses the DEFAULT egress type instead",
            "stability": "experimental",
            "summary": "Settings for an App Runner VPC connector to associate with the service."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 708
          },
          "name": "vpcConnector",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.IVpcConnector"
          }
        }
      ],
      "symbolId": "lib/service:ServiceProps"
    },
    "@aws-cdk/aws-apprunner-alpha.Source": {
      "abstract": true,
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "docs": {
        "stability": "experimental",
        "summary": "Represents the App Runner service source.",
        "example": "import * as iam from 'aws-cdk-lib/aws-iam';\n\nconst service = new apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n});\n\nservice.addToRolePolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['s3:GetObject'],\n  resources: ['*'],\n}))",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.Source",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 395
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from local assets."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 420
          },
          "name": "fromAsset",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.AssetProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.AssetSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from the ECR repository."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 406
          },
          "name": "fromEcr",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.EcrProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.EcrSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from the ECR Public repository."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 413
          },
          "name": "fromEcrPublic",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.EcrPublicProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.EcrPublicSource"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Source from the GitHub repository."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 399
          },
          "name": "fromGitHub",
          "parameters": [
            {
              "name": "props",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.GithubRepositoryProps"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.GithubSource"
            }
          },
          "static": true
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Called when the Job is initialized to allow this object to bind."
          },
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 427
          },
          "name": "bind",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.SourceConfig"
            }
          }
        }
      ],
      "name": "Source",
      "symbolId": "lib/service:Source"
    },
    "@aws-cdk/aws-apprunner-alpha.SourceCodeVersion": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apprunner-service-sourcecodeversion.html",
        "stability": "experimental",
        "summary": "Identifies a version of code that AWS App Runner refers to within a source code repository.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nconst sourceCodeVersion: apprunner_alpha.SourceCodeVersion = {\n  type: 'type',\n  value: 'value',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.SourceCodeVersion",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 600
      },
      "name": "SourceCodeVersion",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The type of version identifier."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 604
          },
          "name": "type",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "A source code version."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 609
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/service:SourceCodeVersion"
    },
    "@aws-cdk/aws-apprunner-alpha.SourceConfig": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Result of binding `Source` into a `Service`.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nimport { aws_ecr as ecr } from 'aws-cdk-lib';\n\ndeclare const gitHubConnection: apprunner_alpha.GitHubConnection;\ndeclare const repository: ecr.Repository;\ndeclare const runtime: apprunner_alpha.Runtime;\ndeclare const secret: apprunner_alpha.Secret;\nconst sourceConfig: apprunner_alpha.SourceConfig = {\n  codeRepository: {\n    codeConfiguration: {\n      configurationSource: apprunner_alpha.ConfigurationSourceType.REPOSITORY,\n\n      // the properties below are optional\n      configurationValues: {\n        runtime: runtime,\n\n        // the properties below are optional\n        buildCommand: 'buildCommand',\n        environment: {\n          environmentKey: 'environment',\n        },\n        environmentSecrets: {\n          environmentSecretsKey: secret,\n        },\n        environmentVariables: {\n          environmentVariablesKey: 'environmentVariables',\n        },\n        port: 'port',\n        startCommand: 'startCommand',\n      },\n    },\n    connection: gitHubConnection,\n    repositoryUrl: 'repositoryUrl',\n    sourceCodeVersion: {\n      type: 'type',\n      value: 'value',\n    },\n  },\n  ecrRepository: repository,\n  imageRepository: {\n    imageIdentifier: 'imageIdentifier',\n    imageRepositoryType: apprunner_alpha.ImageRepositoryType.ECR_PUBLIC,\n\n    // the properties below are optional\n    imageConfiguration: {\n      environment: {\n        environmentKey: 'environment',\n      },\n      environmentSecrets: {\n        environmentSecretsKey: secret,\n      },\n      environmentVariables: {\n        environmentVariablesKey: 'environmentVariables',\n      },\n      port: 123,\n      startCommand: 'startCommand',\n    },\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.SourceConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 253
      },
      "name": "SourceConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no code repository.",
            "stability": "experimental",
            "summary": "The code repository configuration (mutually exclusive  with `imageRepository`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 273
          },
          "name": "codeRepository",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.CodeRepositoryProps"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no ECR repository.",
            "stability": "experimental",
            "summary": "The ECR repository (required to grant the pull privileges for the iam role)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 266
          },
          "name": "ecrRepository",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ecr.IRepository"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no image repository.",
            "stability": "experimental",
            "summary": "The image repository configuration (mutually exclusive  with `codeRepository`)."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 259
          },
          "name": "imageRepository",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-apprunner-alpha.ImageRepository"
          }
        }
      ],
      "symbolId": "lib/service:SourceConfig"
    },
    "@aws-cdk/aws-apprunner-alpha.TcpHealthCheckOptions": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties used to define TCP Based healthchecks.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nimport * as cdk from 'aws-cdk-lib';\nconst tcpHealthCheckOptions: apprunner_alpha.TcpHealthCheckOptions = {\n  healthyThreshold: 123,\n  interval: cdk.Duration.minutes(30),\n  timeout: cdk.Duration.minutes(30),\n  unhealthyThreshold: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.TcpHealthCheckOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/service.ts",
        "line": 923
      },
      "name": "TcpHealthCheckOptions",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "1",
            "stability": "experimental",
            "summary": "The number of consecutive checks that must succeed before App Runner decides that the service is healthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 884
          },
          "name": "healthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(5)",
            "stability": "experimental",
            "summary": "The time interval, in seconds, between health checks."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 891
          },
          "name": "interval",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "Duration.seconds(2)",
            "stability": "experimental",
            "summary": "The time, in seconds, to wait for a health check response before deciding it failed."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 898
          },
          "name": "timeout",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.Duration"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "5",
            "stability": "experimental",
            "summary": "The number of consecutive checks that must fail before App Runner decides that the service is unhealthy."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/service.ts",
            "line": 905
          },
          "name": "unhealthyThreshold",
          "optional": true,
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/service:TcpHealthCheckOptions"
    },
    "@aws-cdk/aws-apprunner-alpha.VpcConnector": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "base": "aws-cdk-lib.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::AppRunner::VpcConnector",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "The App Runner VPC Connector.",
        "example": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  ipAddresses: ec2.IpAddresses.cidr('10.0.0.0/16')\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});"
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.VpcConnector",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/vpc-connector.ts",
          "line": 134
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.VpcConnectorProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-apprunner-alpha.IVpcConnector"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 91
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import from VPC connector attributes."
          },
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 95
          },
          "name": "fromVpcConnectorAttributes",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "attrs",
              "type": {
                "fqn": "@aws-cdk/aws-apprunner-alpha.VpcConnectorAttributes"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-apprunner-alpha.IVpcConnector"
            }
          },
          "static": true
        }
      ],
      "name": "VpcConnector",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Allows specifying security group connections for the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 132
          },
          "name": "connections",
          "overrides": "aws-cdk-lib.aws_ec2.IConnectable",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.Connections"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 115
          },
          "name": "vpcConnectorArn",
          "overrides": "@aws-cdk/aws-apprunner-alpha.IVpcConnector",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 127
          },
          "name": "vpcConnectorName",
          "overrides": "@aws-cdk/aws-apprunner-alpha.IVpcConnector",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The revision of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 121
          },
          "name": "vpcConnectorRevision",
          "overrides": "@aws-cdk/aws-apprunner-alpha.IVpcConnector",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:VpcConnector"
    },
    "@aws-cdk/aws-apprunner-alpha.VpcConnectorAttributes": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Attributes for the App Runner VPC Connector.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as apprunner_alpha from '@aws-cdk/aws-apprunner-alpha';\nimport { aws_ec2 as ec2 } from 'aws-cdk-lib';\n\ndeclare const securityGroup: ec2.SecurityGroup;\nconst vpcConnectorAttributes: apprunner_alpha.VpcConnectorAttributes = {\n  securityGroups: [securityGroup],\n  vpcConnectorArn: 'vpcConnectorArn',\n  vpcConnectorName: 'vpcConnectorName',\n  vpcConnectorRevision: 123,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.VpcConnectorAttributes",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 41
      },
      "name": "VpcConnectorAttributes",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The security groups associated with the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 60
          },
          "name": "securityGroups",
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The ARN of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 50
          },
          "name": "vpcConnectorArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The name of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 45
          },
          "name": "vpcConnectorName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The revision of the VPC connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 55
          },
          "name": "vpcConnectorRevision",
          "type": {
            "primitive": "number"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:VpcConnectorAttributes"
    },
    "@aws-cdk/aws-apprunner-alpha.VpcConnectorProps": {
      "assembly": "@aws-cdk/aws-apprunner-alpha",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Properties of the AppRunner VPC Connector.",
        "example": "import * as ec2 from 'aws-cdk-lib/aws-ec2';\n\nconst vpc = new ec2.Vpc(this, 'Vpc', {\n  ipAddresses: ec2.IpAddresses.cidr('10.0.0.0/16')\n});\n\nconst vpcConnector = new apprunner.VpcConnector(this, 'VpcConnector', {\n  vpc,\n  vpcSubnets: vpc.selectSubnets({ subnetType: ec2.SubnetType.PUBLIC }),\n  vpcConnectorName: 'MyVpcConnector',\n});\n\nnew apprunner.Service(this, 'Service', {\n  source: apprunner.Source.fromEcrPublic({\n    imageConfiguration: { port: 8000 },\n    imageIdentifier: 'public.ecr.aws/aws-containers/hello-app-runner:latest',\n  }),\n  vpcConnector,\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-apprunner-alpha.VpcConnectorProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/vpc-connector.ts",
        "line": 10
      },
      "name": "VpcConnectorProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The VPC for the VPC Connector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 14
          },
          "name": "vpc",
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.IVpc"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a new security group will be created in the specified VPC",
            "stability": "experimental",
            "summary": "A list of IDs of security groups that App Runner should use for access to AWS resources under the specified subnets."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 28
          },
          "name": "securityGroups",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "aws-cdk-lib.aws_ec2.ISecurityGroup"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- a name generated by CloudFormation",
            "stability": "experimental",
            "summary": "The name for the VpcConnector."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 35
          },
          "name": "vpcConnectorName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- Private subnets.",
            "stability": "experimental",
            "summary": "Where to place the VPC Connector within the VPC."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/vpc-connector.ts",
            "line": 21
          },
          "name": "vpcSubnets",
          "optional": true,
          "type": {
            "fqn": "aws-cdk-lib.aws_ec2.SubnetSelection"
          }
        }
      ],
      "symbolId": "lib/vpc-connector:VpcConnectorProps"
    }
  },
  "version": "2.125.0-alpha.0",
  "fingerprint": "**********"
}